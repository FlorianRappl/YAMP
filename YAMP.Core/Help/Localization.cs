namespace YAMP.Help
{
    using System;
    using System.Collections.Generic;

    /// <summary>
    /// Provides localized and default versions of the help texts.
    /// </summary>
    public static class Localization
    {
        /// <summary>
        /// Gets the default help texts to use.
        /// </summary>
        public static readonly IDictionary<String, String> Default = new Dictionary<String, String>
        {
            { "NoDescription", "No description available." },
            { "NoHelp", "No help available." },
            { "AlphaConstantDescription", "The Feigenbaum constant alpha is the ratio between the width of a tine and the width of one of its two subtines (except the tine closest to the fold)." },
            { "AlphaConstantLink", "http://en.wikipedia.org/wiki/Feigenbaum_constant" },
            { "BernoulliConstantDescription", "In mathematics, the Bernoulli numbers Bn are a sequence of rational numbers with deep connections to number theory. The first 21 numbers are given in this vector. The Bernoulli numbers appear in the Taylor series expansions of the tangent and hyperbolic tangent functions, in formulas for the sum of powers of the first positive integers, in the Euler–Maclaurin formula, and in expressions for certain values of the Riemann zeta function." },
            { "BernoulliConstantLink", "http://en.wikipedia.org/wiki/Bernoulli_number" },
            { "CatalanConstantDescription", "In mathematics, Catalan's constant G, which occasionally appears in estimates in combinatorics, is defined by G = beta(2), where beta is the Dirichlet beta function." },
            { "CatalanConstantLink", "http://en.wikipedia.org/wiki/Catalan_constant" },
            { "ContainerConstantDescription", "A custom constant defined by you." },
            { "IConstantDescription", "In mathematics, the imaginary unit or unit imaginary number allows the real number system to be extended to the complex number system." },
            { "IConstantLink", "http://en.wikipedia.org/wiki/Imaginary_unit" },
            { "GaussConstantDescription", "In mathematics, Gauss's constant, denoted by G, is defined as the reciprocal of the arithmetic-geometric mean of 1 and the square root of 2." },
            { "Gamma1ConstantDescription", "The Euler–Mascheroni constant (also called Euler's constant) is a mathematical constant recurring in analysis and number theory." },
            { "Gamma1ConstantLink", "http://en.wikipedia.org/wiki/Euler–Mascheroni_constant" },
            { "FalseConstantDescription", "False can be used in all logical expressions or for calculations. False is numerically represented by 0, however, that does not necessarily mean that everything else is true." },
            { "EConstantDescription", "The number e is an important mathematical constant, approximately equal to 2.71828, that is the base of the natural logarithm." },
            { "EConstantLink", "http://en.wikipedia.org/wiki/E_(mathematical_constant)" },
            { "DeltaConstantDescription", "The Feigenbaum constant delta is the limiting ratio of each bifurcation interval to the next between every period doubling, of a one-parameter map." },
            { "DeltaConstantLink", "http://en.wikipedia.org/wiki/Feigenbaum_constant" },
            { "DegConstantDescription", "A degree (in full, a degree of arc, arc degree, or arcdegree), usually denoted by ° (the degree symbol), is a measurement of plane angle, representing 1⁄360 of a full rotation; one degree is equivalent to π/180 radians." },
            { "DegConstantLink", "http://en.wikipedia.org/wiki/Degree_(angle)" },
            { "TrueConstantDescription", "True can be used in all logical expressions or for calculations. True is numerically represented by 1, however, that does not necessarily mean that everything else is false." },
            { "PiConstantDescription", "The mathematical constant Pi is the ratio of a circle's circumference to its diameter." },
            { "PiConstantLink", "http://en.wikipedia.org/wiki/Pi" },
            { "PhiConstantDescription", "The golden ratio: two quantities are in the golden ratio if the ratio of the sum of the quantities to the larger quantity is equal to the ratio of the larger quantity to the smaller one." },
            { "PhiConstantLink", "http://en.wikipedia.org/wiki/Golden_ratio" },
            { "OmegaConstantDescription", "The omega constant is the value of W(1) where W is Lambert's W function. The name is derived from the alternate name for Lambert's W function, the omega function." },
            { "OmegaConstantLink", "http://en.wikipedia.org/wiki/Omega_constant" },
            { "DiagFunctionDescription", "Creates a diagonal matrix that has the given numeric values on the diagonal." },
            { "DiagFunctionDescriptionForMatrix", "Creates a diagonal matrix with the values from the given matrix." },
            { "DiagFunctionExampleForMatrix1", "Creates a matrix with dimension 25 x 25, containing random values on the diagonal." },
            { "DiagFunctionExampleForMatrix2", "Creates a matrix with dimension 5 x 5, containing random values on the diagonal." },
            { "DiagFunctionDescriptionForScalar", "Creates a diagonal matrix with the given value, i.e. just returns the value (1 x 1 diagonal matrix = scalar)." },
            { "DiagFunctionExampleForScalar1", "Returns the given value, which is 3." },
            { "DiagFunctionDescriptionForArguments", "Tries to create a diagonal matrix with the given arguments, which must be of numeric nature, i.e. scalars or matrices." },
            { "DiagFunctionExampleForArguments1", "Creates the unit matrix with dimension 4." },
            { "DiagFunctionExampleForArguments2", "Creates a matrix that is close to the unit matrix, except that one block has been rotated in the middle." },
            { "EyeFunctionDescription", "Generates an identity matrix. In linear algebra, the identity matrix or unit matrix of size n is the n x n square matrix with ones on the main diagonal and zeros elsewhere." },
            { "EyeFunctionLink", "http://en.wikipedia.org/wiki/Identity_matrix" },
            { "EyeFunctionDescriptionForVoid", "Generates the 1x1 identity matrix, which is just 1." },
            { "EyeFunctionDescriptionForScalar", "Generates an n-dimensional identity matrix." },
            { "EyeFunctionExampleForScalar1", "Returns a 5x5 matrix with 1 on the diagonal and 0 else." },
            { "EyeFunctionDescriptionForScalarScalar", "Generates an n x m-dimensional identity matrix." },
            { "EyeFunctionExampleForScalarScalar1", "Returns a 5x3 matrix with 1 on the diagonal and 0 else." },
            { "ImgToRGBFunctionDescription", "Converts matrix data loaded from an image into three matrices which contain the red, green, and blue values separately. It is the inverse function to RgbToImg." },
            { "ImgToRGBFunctionDescriptionForMatrix", "Gets the RGB values of an image matrix." },
            { "ImgToRGBFunctionExampleForMatrix1", "Returns three matrices containing the red, green, and blue values of the image." },
            { "LinspaceFunctionDescription", "Returns a uniformly increased vector." },
            { "LinspaceFunctionDescriptionForScalarScalarScalar", "Creates a vector with count elements ranging from a certain value to a certain value." },
            { "LinspaceFunctionExampleForScalarScalarScalar1", "Creates the vector [0, 2.5, 5, 7.5, 10], i.e. stepping 2.5 and number of elements 5." },
            { "LogspaceFunctionDescription", "Returns a logarithmically increased vector." },
            { "LogspaceFunctionDescriptionForScalarScalarScalar", "Creates a vector with count elements ranging from a certain value to a certain value for the basis 10." },
            { "LogspaceFunctionExampleForScalarScalarScalar1", "Creates the vector [100, 177, 316, 562, 1000], i.e. start at 10^2 and end at 10^3 with number of elements 5." },
            { "LogspaceFunctionDescriptionForScalarScalarScalarScalar", "Creates a vector with count elements ranging from a certain value to a certain value for an arbitrary basis." },
            { "LogspaceFunctionExampleForScalarScalarScalarScalar1", "Creates the vector [4, 8, 16, 32, 64], i.e. start at 2^2 and end at 2^6 with number of elements 5." },
            { "MeshgridFunctionDescription", "Generate X and Y matrices for three-dimensional plots." },
            { "MeshgridFunctionDescriptionForMatrix", "The function call is the same as [X, Y] = meshgrid(x, x), i.e. the input value is seen as both, X and Y vector." },
            { "MeshgridFunctionReturnForMatrix1", "The generated X value matrix." },
            { "MeshgridFunctionReturnForMatrix2", "The generated Y value matrix." },
            { "MeshgridFunctionDescriptionForMatrixMatrix", "Transforms the domain specified by vectors x and y into arrays X and Y, which can be used to evaluate functions of two variables and three-dimensional mesh/surface plots. The rows of the output array X are copies of the vector x; columns of the output array Y are copies of the vector y." },
            { "MeshgridFunctionExampleForMatrixMatrix1", "Creates the X and Y matrices with X having the values 1 to 3 in each row, while Y has the values 10 to 14 in each column." },
            { "MeshgridFunctionReturnForMatrixMatrix1", "The generated X value matrix." },
            { "MeshgridFunctionReturnForMatrixMatrix2", "The generated Y value matrix." },
            { "ModFunctionDescription", "Calculates the modulo of the integer real parts of the arguments." },
            { "ModFunctionLink", "http://en.wikipedia.org/wiki/Modular_arithmetic" },
            { "ModFunctionDescriptionForMatrixScalar", "Performes the modulo operation on each of the entries of the given matrix." },
            { "ModFunctionExampleForMatrixScalar1", "Computes the modulo matrix resulting in [1,0;1;0]." },
            { "ModFunctionDescriptionForScalarMatrix", "Performes the modulo operation on each of the entries of the given matrix." },
            { "ModFunctionExampleForScalarMatrix1", "Computes the modulo matrix resulting in [0,0;2;2]." },
            { "ModFunctionDescriptionForScalarScalar", "Calculates the modulo of the integer real parts of the numerator with respect to the denominator." },
            { "ModFunctionExampleForScalarScalar1", "Computes the modulo of 17 with respect to 3 resulting in 2." },
            { "NcrFunctionDescription", "In mathematics, binomial coefficients are a family of positive integers that occur as coefficients in the binomial theorem. They are indexed by two nonnegative integers; the binomial coefficient indexed by n and r is usually written (n k). It is the coefficient of the x^k term in the polynomial expansion of the binomial power (1 + x)^n. Under suitable circumstances the value of the coefficient is given by the expression n! / (k! * (n - k)!). Arranging binomial coefficients into rows for successive values of n, and in which k ranges from 0 to n, gives a triangular array called Pascal's triangle." },
            { "NcrFunctionLink", "http://en.wikipedia.org/wiki/Binomial_coefficient" },
            { "NcrFunctionDescriptionForScalarScalar", "Computes the value of r out of n, i.e. n choose r." },
            { "NcrFunctionExampleForScalarScalar1", "Computes 8! / (2! * 6!), which is 28." },
            { "OnesFunctionDescription", "Generates a matrix with only ones." },
            { "OnesFunctionDescriptionForVoid", "Generates a 1x1 matrix." },
            { "OnesFunctionDescriptionForScalar", "Generates an n-dimensional matrix with only ones." },
            { "OnesFunctionExampleForScalar1", "Returns a 5x5 matrix with 1 in each cell." },
            { "OnesFunctionDescriptionForScalarScalar", "Generates a n-by-m matrix with only ones." },
            { "OnesFunctionExampleForScalarScalar1", "Returns a 5x2 matrix with 1 in each cell." },
            { "RGBToImgFunctionDescription", "Fuses three matrices containing the reg, green, and blue values of an image separately into one single matrix which contains the information of the three matrices. It is the inverse function to ImgToRgb." },
            { "RGBToImgFunctionDescriptionForMatrixMatrixMatrix", "Given the red, green, and blue matrices (with values between 0 and 255) this function calculates blue + green * 256 + red * 256^2 using only the real integer part of the matrices." },
            { "RGBToImgFunctionExampleForMatrixMatrixMatrix1", "Reverses the transformation by the ImgToRgb function." },
            { "SphereFunctionDescription", "The sphere function generates the x-, y-, and z-coordinates of a unit sphere for use with surf and mesh." },
            { "SphereFunctionDescriptionForVoid", "Draws a surf plot of an 20-by-20 sphere in the current figure." },
            { "SphereFunctionExampleForVoid1", "Returns the three matrices with x-, y-, and Z coordinates for a unit sphere. The matrices are saved in the variables X, Y, Z." },
            { "SphereFunctionDescriptionForScalar", "Draws a surf plot of an n-by-n sphere in the current figure." },
            { "SphereFunctionExampleForScalar1", "Returns the three matrices with x-, y-, and Z coordinates for a unit sphere with n = 30. The 31x31 matrices are saved in the variables X, Y, Z." },
            { "ZerosFunctionDescription", "Generates a matrix with only zeros." },
            { "ZerosFunctionDescriptionForVoid", "Generates a 1x1 matrix." },
            { "ZerosFunctionDescriptionForScalar", "Generates an n-dimensional matrix with only zeros." },
            { "ZerosFunctionExampleForScalar1", "Returns a 5x5 matrix with 0 in each cell." },
            { "ZerosFunctionDescriptionForScalarScalar", "Generates a n-by-m matrix with only zeros." },
            { "ZerosFunctionExampleForScalarScalar1", "Returns a 5x2 matrix with 0 in each cell." },
            { "ContainerFunctionDescription", "A custom function defined by you." },
            { "ContainerFunctionDescriptionForContextValue", "Executes the custom function with your code." },
            { "Bin2DecFunctionDescription", "Converts a binary number to a decimal number." },
            { "Bin2DecFunctionDescriptionForString", "The function ignores white spaces and converts the given binary input to the equivalent decimal number." },
            { "Bin2DecFunctionExampleForString1", "Binary 010111 converts to decimal 23." },
            { "Cart2PolFunctionDescription", "Converts a vector given in cartesian coordinates to a polar coordinates." },
            { "Cart2PolFunctionDescriptionForScalarScalar", "Converts a set of values (x, y) to a column vector with 2 rows (r, phi)." },
            { "Cart2PolFunctionExampleForScalarScalar1", "Computes the polar coordinates of the given cartesian coordinates x = 3, y = 2." },
            { "Cart2PolFunctionDescriptionForMatrix", "Converts a matrix of values (x, y in the rows or columns) to a matrix of converted values." },
            { "Cart2PolFunctionExampleForMatrix1", "Evaluates the 4x2 matrix, using the columns as vectors (a set of row vectors to be converted)." },
            { "Cart2SphFunctionDescription", "Converts a vector given in cartesian coordinates to a spherical coordinates." },
            { "Cart2SphFunctionDescriptionForScalarScalarScalar", "Converts a set of values (x, y, z) to a column vector with 3 rows (r, phi, theta)." },
            { "Cart2SphFunctionExampleForScalarScalarScalar1", "Computes the spherical coordinates of the given cartesian coordinates x = 3, y = 2 and z = 1." },
            { "Cart2SphFunctionDescriptionForMatrix", "Converts a matrix of values (x, y, z in the rows or columns) to a matrix of converted values." },
            { "Cart2SphFunctionExampleForMatrix1", "Evaluates the 4x3 matrix, using the columns as vectors (a set of row vectors to be converted)." },
            { "Hex2DecFunctionDescription", "Converts a hexadecimal number to a decimal number." },
            { "Hex2DecFunctionDescriptionForString", "The function ignores white spaces and converts the given hexadecimal input to the equivalent decimal number." },
            { "Hex2DecFunctionExampleForString1", "Hexadecimal FF converts to decimal 255." },
            { "Oct2DecFunctionDescription", "Converts a octal number to a decimal number." },
            { "Oct2DecFunctionDescriptionForString", "The function ignores white spaces and converts the given octal input to the equivalent decimal number." },
            { "Oct2DecFunctionExampleForString1", "Octal 1627 converts to decimal 919." },
            { "Sph2CartFunctionDescription", "Converts a vector given in spherical coordinates to a cartesian coordinates." },
            { "Sph2CartFunctionDescriptionForScalarScalarScalar", "Converts a set of values (r, theta, phi) to a column vector with 3 rows (x, y, z)." },
            { "Sph2CartFunctionExampleForScalarScalarScalar1", "Computes the cartesian coordinates of the given spherical coordinates r = 4, theta = pi / 2 and phi = pi /4." },
            { "Sph2CartFunctionDescriptionForMatrix", "Converts a matrix of values (r, theta, phi in the rows or columns) to a matrix of converted values." },
            { "Sph2CartFunctionExampleForMatrix1", "Evaluates the 4x3 matrix, using the columns as vectors (a set of row vectors to be converted)." },
            { "StandardFunctionDescriptionForScalar", "Computes the value and returns the result." },
            { "StandardFunctionDescriptionForMatrix", "Computes the value of each entry of the given matrix and returns a matrix with the same dimension." },
            { "FindFunctionDescription", "Find indices and values of nonzero elements." },
            { "FindFunctionDescriptionForMatrix", "Locates all nonzero elements of the matrix M, and returns the linear indices of those elements in a column vector. If M contains no nonzero elements, then an empty matrix will be returned." },
            { "FindFunctionExampleForMatrix1", "Returns all indices of the matrix which are related to non-zero entries." },
            { "FindFunctionDescriptionForMatrixScalar", "Returns at most the first n indices corresponding to the nonzero entries of M, where n must be a positive integer." },
            { "FindFunctionExampleForMatrixScalar1", "Returns the first 10 indices which are non-zero." },
            { "FindFunctionDescriptionForMatrixScalarScalar", "Returns at n indices with offset sigma corresponding to the nonzero entries of M, where n must be a positive integer. If sigma is negative, then it will start from the end of the list." },
            { "FindFunctionExampleForMatrixScalarScalar1", "Returns the last 10 indices which are non-zero." },
            { "CumsumFunctionDescription", "Computes the cumulative sum of the given arguments." },
            { "CumsumFunctionDescriptionForScalar", "Just returns the given scalar, since the cumulative sum of one scalar is the scalar itself." },
            { "CumsumFunctionDescriptionForMatrix", "Computes the cumulative sum of a vector or a list of vectors, i.e. a matrix." },
            { "CumsumFunctionExampleForMatrix1", "Returns the vector [1, 3, 6, 6, 9, 11], which is the cumulative sum of the given vector." },
            { "CumprodFunctionDescription", "Computes the cumulative product of the given arguments." },
            { "CumprodFunctionDescriptionForScalar", "Just returns the given scalar, since the cumulative product of one scalar is the scalar itself." },
            { "CumprodFunctionDescriptionForMatrix", "Computes the cumulative product of a vector or a list of vectors, i.e. a matrix." },
            { "CumprodFunctionExampleForMatrix1", "Returns the vector [1, 2, 6, 0, 0, 0], which is the cumulative product of the given vector." },
            { "AnyFunctionDescription", "Determine whether any matrix element is nonzero." },
            { "AnyFunctionDescriptionForMatrix", "Tests whether any of the elements along various dimensions of an array is nonzero." },
            { "AnyFunctionExampleForMatrix1", "Tests the 2x2 matrix with only zeros. Returns false." },
            { "AnyFunctionExampleForMatrix2", "Tests the 3x3 identity matrix. Returns true." },
            { "AllFunctionDescription", "Determine whether all matrix elements are nonzero." },
            { "AllFunctionDescriptionForMatrix", "Tests whether all the elements along various dimensions of an array are nonzero." },
            { "AllFunctionExampleForMatrix1", "Tests the 2x2 matrix with only zeros. Returns false." },
            { "AllFunctionExampleForMatrix2", "Tests the 3x3 identity matrix. Returns false." },
            { "AllFunctionExampleForMatrix3", "Tests the given 2x2 matrix. Returns true." },
            { "NewtonFunctionDescription", "Calculates values within the Mandelbrot fractal." },
            { "NewtonFunctionLink", "http://en.wikipedia.org/wiki/Newton_fractal" },
            { "NewtonFunctionDescriptionForVoid", "Calculates the most interesting region of the Newton fractal." },
            { "NewtonFunctionExampleForVoid1", "Computes the most interesting region x in (-1.0, 1.0), y in (-1.0, 1.0) with a resolution of 150 x 150 points." },
            { "NewtonFunctionDescriptionForScalar", "Calculates a point in the Newton fractal." },
            { "NewtonFunctionExampleForScalar1", "Computes the point z = x + iy with x = -2.5, y = -1." },
            { "NewtonFunctionDescriptionForScalarScalar", "Calculates a point in the Newton fractal." },
            { "NewtonFunctionExampleForScalarScalar1", "Computes the point with x = -0.5, y = -1." },
            { "NewtonFunctionDescriptionForScalarScalarScalar", "Calculates a subset of the Newton fractal." },
            { "NewtonFunctionExampleForScalarScalarScalar1", "Computes a matrix (10 rows, 10 columns) within x = -2.5..1 and y = -1..1." },
            { "NewtonFunctionDescriptionForScalarScalarScalarScalar", "Calculates a subset of the Newton fractal." },
            { "NewtonFunctionExampleForScalarScalarScalarScalar1", "Computes the matrix within x = -2.5..1 and y = -1..1 with a precision of 0.1." },
            { "NewtonFunctionDescriptionForScalarScalarScalarScalarScalarScalar", "Calculates a subset of the Newton fractal." },
            { "NewtonFunctionExampleForScalarScalarScalarScalarScalarScalar1", "Computes a 5x5 matrix within x = -0.5..1 and y = -1..1." },
            { "MandelbrotFunctionDescription", "Calculates values within the Mandelbrot fractal." },
            { "MandelbrotFunctionLink", "http://en.wikipedia.org/wiki/Mandelbrot_set" },
            { "MandelbrotFunctionDescriptionForVoid", "Calculates the most interesting region of the Mandelbrot fractal." },
            { "MandelbrotFunctionExampleForVoid1", "Computes the most interesting region x in (-2.5, 1.0), y in (-1.0, 1.0) with a resolution of 150 x 150 points." },
            { "MandelbrotFunctionDescriptionForScalar", "Calculates a point in the Mandelbrot fractal." },
            { "MandelbrotFunctionExampleForScalar1", "Computes the point z = x + iy with x = -2.5, y = -1." },
            { "MandelbrotFunctionDescriptionForScalarScalar", "Calculates a point in the Mandelbrot fractal." },
            { "MandelbrotFunctionExampleForScalarScalar1", "Computes the point with x = -2.5, y = -1." },
            { "MandelbrotFunctionDescriptionForScalarScalarScalar", "Calculates a subset of the Mandelbrot fractal." },
            { "MandelbrotFunctionExampleForScalarScalarScalar1", "Computes a matrix (10 x 10) within x = -2.5..1 and y = -1..1." },
            { "MandelbrotFunctionDescriptionForScalarScalarScalarScalar", "Calculates a subset of the Mandelbrot fractal." },
            { "MandelbrotFunctionExampleForScalarScalarScalarScalar1", "Computes the matrix within x = -2.5..1 and y = -1..1 with a precision of 0.1." },
            { "MandelbrotFunctionDescriptionForScalarScalarScalarScalarScalarScalar", "Calculates a subset of the Mandelbrot fractal." },
            { "MandelbrotFunctionExampleForScalarScalarScalarScalarScalarScalar1", "Computes a 5x5 matrix within x = -2.5..1 and y = -1..1." },
            { "ObjectFunctionDescription", "Creates an empty object." },
            { "ObjectFunctionDescriptionForVoid", "Creates an empty object without any keys." },
            { "ObjectFunctionExampleForVoid1", "Returns an empty object that can represents a key-value store." },
            { "BetaFunctionDescription", "In mathematics, the beta function, also called the Euler integral of the first kind, is a special function. The beta function was studied by Euler and Legendre and was given its name by Jacques Binet; its symbol Β is a Greek capital β rather than the similar Latin capital B." },
            { "BetaFunctionLink", "http://en.wikipedia.org/wiki/Beta_function" },
            { "BetaFunctionDescriptionForScalarScalar", "Computes the beta function for corresponding values z and w. The values must be real and positive." },
            { "BetaFunctionExampleForScalarScalar1", "Evaluates the beta function at z = 5 and w = 3." },
            { "BetaFunctionDescriptionForMatrixMatrix", "Computes the beta function for corresponding elements of arrays Z and W. The arrays must be real and positive. They must be the same size, or either can be scalar." },
            { "BetaFunctionExampleForMatrixMatrix1", "Evaluates the beta function at the points (1, 0), (2, 1), ... up to (5, 4)." },
            { "BetaFunctionDescriptionForMatrixScalar", "Computes the beta function for corresponding elements of an array Z and a scalar value w. The values must be real and positive." },
            { "BetaFunctionExampleForMatrixScalar1", "Evaluates the beta function at w = 3 for z = 1 to 10." },
            { "BetaFunctionDescriptionForScalarMatrix", "Computes the beta function for corresponding elements of a scalar value z and an arrays W. The values must be real and positive." },
            { "BetaFunctionExampleForScalarMatrix1", "Evaluates the beta function at z = 2 for w = 1 to 10." },
            { "ConvnFunctionDescription", "In mathematics and, in particular, functional analysis, convolution is a mathematical operation on two functions f and g, producing a third function that is typically viewed as a modified version of one of the original functions, giving the area overlap between the two functions as a function of the amount that one of the original functions is translated. Convolution is similar to cross-correlation." },
            { "ConvnFunctionLink", "http://en.wikipedia.org/wiki/Convolution" },
            { "ConvnFunctionDescriptionForMatrixMatrix", "Performs the convolution of two vextors of data, A and B. The result has the length length(A) + length(B) - 1." },
            { "ConvnFunctionExampleForMatrixMatrix1", "The convolution of two rectangle signals is a triangle signal." },
            { "FFTFunctionDescription", "Provides a fast-fourier-transform function for 2^n (complex) values." },
            { "FFTFunctionLink", "http://en.wikipedia.org/wiki/Fast_Fourier_transform" },
            { "FFTFunctionDescriptionForMatrix", "Fourier transforms a matrix of elements." },
            { "FFTFunctionExampleForMatrix1", "Uses FFT on the vector [0,1,0,5]." },
            { "PochFunctionDescription", "In mathematics, the Pochhammer symbol introduced by Leo August Pochhammer is the notation (x)n, where n is a non-negative integer. Depending on the context the Pochhammer symbol may represent either the rising factorial or the falling factorial." },
            { "PochFunctionLink", "http://en.wikipedia.org/wiki/Pochhammer_symbol" },
            { "PochFunctionDescriptionForScalarScalar", "Computes the Pochhammer symbol using the (in general complex) values z and n, where poch(z, n) = Gamma(z + n) / Gamma(z)." },
            { "PochFunctionExampleForScalarScalar1", "Evaluates gamma(1.5) / gamma(1)." },
            { "PochFunctionDescriptionForMatrixScalar", "Computes the Pochhammer symbol using the (in general complex) matrix Z and the scalar n, where poch(Z, n)(i, j) = Gamma(Z(i, j) + n) / Gamma(Z(i, j))." },
            { "PochFunctionExampleForMatrixScalar1", "Evaluates gamma(1.5) / gamma(1), gamma(2.5) / gamma(2), ... and returns the matrix containing the values." },
            { "PochFunctionDescriptionForScalarMatrix", "Computes the Pochhammer symbol using the (in general complex) scalar z and the matrix N, where poch(z, N)(i, j) = Gamma(z + N(i, j)) / Gamma(z)." },
            { "PochFunctionExampleForScalarMatrix1", "Evaluates gamma(1.1) / gamma(1), gamma(1.3) / gamma(1), ... and returns the matrix containing the values." },
            { "PochFunctionDescriptionForMatrixMatrix", "Computes the Pochhammer symbol using the (in general complex) matrices Z and N, where poch(Z, N)(i, j) = Gamma(Z(i, j) + N(i, j)) / Gamma(Z(i, j)). The matrices Z and N must have equal dimensions." },
            { "PochFunctionExampleForMatrixMatrix1", "Evaluates gamma(1.1) / gamma(1), gamma(2.3) / gamma(2), gamma(3.5) / gamma(3), ... and returns the matrix containing the values." },
            { "IsRealFunctionDescription", "Returns a boolean matrix to state if the given values are real." },
            { "IsRealFunctionLink", "http://en.wikipedia.org/wiki/Real_number" },
            { "IsPrimeFunctionDescription", "Returns a boolean matrix to state if the given numbers are prime integers." },
            { "IsPrimeFunctionLink", "http://en.wikipedia.org/wiki/Prime_number" },
            { "IsNaNFunctionDescription", "Returns a boolean matrix to state if the given numbers are proper numbers." },
            { "IsNaNFunctionLink", "http://en.wikipedia.org/wiki/NaN" },
            { "IsIntFunctionDescription", "Returns a boolean matrix to state if the given values are integers." },
            { "IsIntFunctionLink", "http://en.wikipedia.org/wiki/Integer" },
            { "IsInfiniteFunctionDescription", "Returns a boolean matrix to state if the given numbers are infinite." },
            { "IsInfiniteFunctionLink", "http://en.wikipedia.org/wiki/Infinity" },
            { "IsComplexFunctionDescription", "Returns a boolean matrix to state if the given values have imaginary parts." },
            { "IsComplexFunctionLink", "http://en.wikipedia.org/wiki/Complex_number" },
            { "Pol2CartFunctionDescription", "Converts a vector given in polar coordinates to a cartesian coordinates." },
            { "Pol2CartFunctionDescriptionForScalarScalar", "Converts a set of values (r, phi) to a column vector with 2 rows (x, y)." },
            { "Pol2CartFunctionExampleForScalarScalar1", "Computes the cartesian coordinates of the given polar coordinates r = 4, phi = pi / 2." },
            { "Pol2CartFunctionDescriptionForMatrix", "Converts a matrix of values (r, phi, in the rows or columns) to a matrix of converted values." },
            { "Pol2CartFunctionExampleForMatrix1", "Evaluates the 4x2 matrix, using the columns as vectors (a set of row vectors to be converted)." },
            { "CGFunctionDescription", "Uses the conjugate gradient algorithm to solve a linear system of equations." },
            { "CGFunctionLink", "http://en.wikipedia.org/wiki/Conjugate_gradient_method" },
            { "CGFunctionDescriptionForMatrixMatrix", "Computes the solution vector x for a given matrix A and a source vector b." },
            { "CGFunctionExampleForMatrixMatrix1", "Here A is an arbitrary symmetric positive definite matrix and b is a random source vector." },
            { "CGFunctionDescriptionForMatrixMatrixMatrix", "Computes the solution vector x for a given matrix A, a specified starting solution x0 (guess) and a source vector b." },
            { "CGFunctionExampleForMatrixMatrixMatrix1", "Here A is an arbitrary symmetric positive definite matrix, x0 is a start vector (1;0;0) and b is a random source vector." },
            { "CholFunctionDescription", "In linear algebra, the Cholesky decomposition or Cholesky triangle is a decomposition of a Hermitian, positive-definite matrix into the product of a lower triangular matrix and its conjugate transpose." },
            { "CholFunctionLink", "http://en.wikipedia.org/wiki/QR_decomposition" },
            { "CholFunctionDescriptionForMatrix", "Computes the Cholesky decomposition of a given SPD matrix and returns the L matrix which is given by L * L' = M, where L' is the adjungate matrix of L." },
            { "CholFunctionExampleForMatrix1", "Computes the matrix L of the given matrix." },
            { "DetFunctionDescription", "Calculates the determinant of the given matrix." },
            { "DetFunctionLink", "http://en.wikipedia.org/wiki/Determinant" },
            { "DetFunctionDescriptionForMatrix", "Uses the best algorithm to compute the determinant." },
            { "DetFunctionExampleForMatrix1", "Computes the determinant of the matrix [1,3;-1,0]; returns 3." },
            { "DetFunctionDescriptionForScalar", "Returns the argument." },
            { "DetFunctionExampleForScalar1", "The determinant of a 1x1 matrix is the argument itself." },
            { "EigFunctionDescription", "Computes the eigenvalues and eigenvectors of a given matrix." },
            { "EigFunctionLink", "http://en.wikipedia.org/wiki/Eigendecomposition_of_a_matrix" },
            { "EigFunctionDescriptionForMatrix", "Solves the eigenproblem of a matrix A and return a vector with all (and degenerate) eigenvalues." },
            { "EigFunctionExampleForMatrix1", "Returns a vector with the three eigenvalues 16.11684, -1.11684 and 0 of this 3x3 matrix." },
            { "EigFunctionExampleForMatrix2", "Saves a vector with the three eigenvalues 16.11684, -1.11684 and 0 of this 3x3 matrix in the variable vals and a matrix containing the eigenvectors in the variable vecs." },
            { "EigFunctionReturnForMatrix1", "The eigenvalues of the matrix stored in a vector." },
            { "EigFunctionReturnForMatrix2", "The eigenvectors of the matrix stored in a matrix." },
            { "EigValFunctionDescription", "Computes the eigenvalues of a given matrix." },
            { "EigValFunctionDescriptionForMatrix", "Solves the eigenproblem of a matrix A and return a vector with all (+degenerate) eigenvalues." },
            { "EigValFunctionExampleForMatrix1", "Returns a vector with the three eigenvalues 16.11684, -1.11684 and 0 of this 3x3 matrix." },
            { "EigVecFunctionDescription", "Computes the eigenvectors of a given matrix." },
            { "EigVecFunctionDescriptionForMatrix", "Solves the eigenproblem of a matrix A and return a matrix with all (and degenerate) eigenvectors." },
            { "EigVecFunctionExampleForMatrix1", "Returns a 3x3 matrix with the three eigenvectors of this 3x3 matrix." },
            { "GMRESFunctionDescription", "Uses the GMRES / GMRES(k) algorithm to solve a linear system of equations." },
            { "GMRESFunctionLink", "http://en.wikipedia.org/wiki/Generalized_minimal_residual_method" },
            { "GMRESFunctionDescriptionForMatrixMatrix", "Computes the solution vector x for a given matrix A and a source vector b." },
            { "GMRESFunctionExampleForMatrixMatrix1", "Here A is a random 3x3 matrix and b is a random source vector with 3 rows." },
            { "GMRESFunctionDescriptionForMatrixMatrixMatrix", "Computes the solution vector x for a given matrix A, a specified starting solution x0 (guess) and a source vector b." },
            { "GMRESFunctionExampleForMatrixMatrixMatrixMatrix1", "Here A is a random 3x3 matrix, x0 is a start vector with 3 rows (1,0,0) and b is a random source vector with 3 rows." },
            { "InvFunctionDescription", "Inverts the given matrix." },
            { "InvFunctionDescriptionForScalar", "Finds the inverse of a given number." },
            { "InvFunctionExampleForScalar1", "Inverts the number 5, resulting in 0.2." },
            { "InvFunctionDescriptionForMatrix", "Tries to find the inverse of the matrix, i.e. inv(A)=A^-1." },
            { "InvFunctionExampleForMatrix1", "Inverts the matrix [0,2;1,0], resulting in [0,1;0.5,0]." },
            { "LUFunctionDescription", "In linear algebra, LU decomposition (also called LU factorization) factorizes a matrix as the product of a lower triangular matrix and an upper triangular matrix. The product sometimes includes a permutation matrix as well. The LU decomposition can be viewed as the matrix form of Gaussian elimination." },
            { "LUFunctionLink", "http://en.wikipedia.org/wiki/LU_decomposition" },
            { "LUFunctionDescriptionForMatrix", "An LU decomposition is a decomposition of the form PA = LU, where L is a lower triangular matrix, P is a permutation matrix containing the pivot elements and U is an upper triangular matrix." },
            { "LUFunctionExampleForMatrix1", "Computes the LU-decomposition of the matrix and returns the lower matrix L." },
            { "LUFunctionExampleForMatrix2", "Computes the LU-decomposition of the matrix and returns the lower matrix L (saved in the variable L) and the upper matrix R (saved in the variable R). The permutation matrix is saved in the variable P." },
            { "LUFunctionReturnForMatrix1", "The lower matrix L." },
            { "LUFunctionReturnForMatrix2", "The upper (right) matrix U." },
            { "LUFunctionReturnForMatrix3", "The permutation matrix P." },
            { "MagicFunctionDescription", "The magic function randomly generates matrices that consist only of unique entries 1 <= k <= n^2, where n is the dimension of the matrix. The determinant of a magic matrix is always 0." },
            { "MagicFunctionDescriptionForScalar", "Creates a magic nxn-matrix, that consists only of integer entries." },
            { "MagicFunctionExampleForScalar1", "Creates a 3x3-matrix with unique shuffled entries ranging from 1 to 9." },
            { "QRFunctionDescription", "In linear algebra, a QR decomposition (also called a QR factorization) of a matrix is a decomposition of a matrix A into a product A=QR of an orthogonal matrix Q and an upper triangular matrix R. QR decomposition is often used to solve the linear least squares problem, and is the basis for a particular eigenvalue algorithm, the QR algorithm." },
            { "QRFunctionLink", "http://en.wikipedia.org/wiki/QR_decomposition" },
            { "QRFunctionDescriptionForMatrix", "Any real square matrix A may be decomposed as A = QR, where Q is an orthogonal matrix (its columns are orthogonal unit vectors) and R is an upper triangular matrix (also called right triangular matrix). This generalizes to a complex square matrix A and a unitary matrix Q. If A is invertible, then the factorization is unique if we require that the diagonal elements of R are positive." },
            { "QRFunctionExampleForMatrix1", "Computes the matrix Q of the given matrix." },
            { "QRFunctionExampleForMatrix2", "Computes the matrices Q and R and stores them in the variables Q and R." },
            { "QRFunctionReturnForMatrix1", "The economy sized orthogonal factor matrix Q." },
            { "QRFunctionReturnForMatrix2", "The upper triangular factor matrix R." },
            { "SolveFunctionDescription", "Solves a system of linear equations by picking the best algorithm." },
            { "SolveFunctionDescriptionForMatrixMatrix", "Searches a solution vector x for the matrix M and the source vector phi." },
            { "SolveFunctionExampleForMatrixMatrix1", "Solves the equation M * x = b for a random 3x3 matrix M and a random vector phi." },
            { "SolveFunctionDescriptionForScalarScalar", "Searches a solution vector x for the scalar a and the source b." },
            { "SolveFunctionExampleForScalarScalar1", "Solves the equation a * x = b for a scalar a = 7 and a source b = 2." },
            { "SvdFunctionDescription", "In linear algebra, the singular value decomposition (SVD) is a factorization of a real or complex matrix, with many useful applications in signal processing and statistics." },
            { "SvdFunctionLink", "http://en.wikipedia.org/wiki/Singular_value_decomposition" },
            { "SvdFunctionDescriptionForMatrix", "Applications which employ the SVD include computing the pseudoinverse, least squares fitting of data, matrix approximation, and determining the rank, range and null space of a matrix." },
            { "SvdFunctionExampleForMatrix1", "Computes the matrices Sigma (singular values), U (left-singular vectors) and V* (right-singular vectors) of the matrix." },
            { "SvdFunctionExampleForMatrix2", "Computes the matrices Sigma, U and V* and stores them in the matrices S, U, V." },
            { "SvdFunctionReturnForMatrix1", "The diagonal matrix of singular values (Sigma)." },
            { "SvdFunctionReturnForMatrix2", "The left singular vectors (U)." },
            { "SvdFunctionReturnForMatrix3", "The right singular vectors (V*)." },
            { "TraceFunctionDescription", "Performs the trace operation on the given matrix." },
            { "TraceFunctionLink", "http://en.wikipedia.org/wiki/Trace_(linear_algebra)" },
            { "TraceFunctionDescriptionForMatrix", "Sums all elements on the diagonal." },
            { "TraceFunctionExampleForMatrix1", "Results in the value 5." },
            { "TraceFunctionDescriptionForScalar", "The trace of a 1x1 matrix is the element itself." },
            { "TraceFunctionExampleForScalar1", "Results in the value 10." },
            { "TrilFunctionDescription", "The function computes the lower triangle matrix of a given matrix." },
            { "TrilFunctionDescriptionForMatrix", "Given a square matrix the function computes the lower triangular matrix." },
            { "TrilFunctionExampleForMatrix1", "Computes the lower triangle matrix of the given 4x4 random matrix, which is P * L from the P, L, U decomposition." },
            { "VectorFunctionDescription", "Creates a vector (a n-times-1 matrix) out of the given data." },
            { "VectorFunctionDescriptionForMatrix", "Creates a vector with the length of the given matrix. An mxn-matrix will be transformed to a vector with length m*n." },
            { "VectorFunctionExampleForMatrix1", "Creates the vector [1, 2, 3, 4] out of the given 2x2 matrix." },
            { "TriuFunctionDescription", "The function computes the upper triangle matrix of a given matrix." },
            { "TriuFunctionDescriptionForMatrix", "Given a square matrix the function computes the upper triangular matrix." },
            { "TriuFunctionExampleForMatrix1", "Computes the upper triangle matrix of the given 4x4 random matrix." },
            { "TrapzFunctionDescription", "Integrates a given vector of values with the Trapezoidal rule (perfect for first order polynomials, i.e. linear functions)." },
            { "TrapzFunctionLink", "http://en.wikipedia.org/wiki/Trapezoidal_rule" },
            { "TrapzFunctionDescriptionForMatrixMatrix", "Computes the integral for a given range of y values with its x vector." },
            { "TrapzFunctionExampleForMatrixMatrix1", "Computes the value of the sinus function between 0 and pi (analytic result is 2)." },
            { "DiffFunctionDescription", "Differentiates a given vector numerically by differences and returns the derivative vector." },
            { "DiffFunctionLink", "http://en.wikipedia.org/wiki/Derivative" },
            { "DiffFunctionDescriptionForMatrix", "Differentiates a given vector numerically by differences and returns the derivative vector." },
            { "DiffFunctionExampleForMatrix1", "Differentiates the function values given in the matrix and returns the antiderivative matrix [1,2,3,2;2,1,0,-1]." },
            { "GcdFunctionDescription", "Computes the greatest common divisor of the given elements." },
            { "GcdFunctionLink", "http://en.wikipedia.org/wiki/Greatest_common_divisor" },
            { "GcdFunctionDescriptionForMatrix", "Given a matrix of integers the greatest common divisor is computed." },
            { "GcdFunctionExampleForMatrix1", "Evaluates the list [ 54, 24 ] and returns the GCD , which is 6." },
            { "GcdFunctionExampleForMatrix2", "Evaluates the list [ 54, 24, 42 ] and returns the GCD , which is 6." },
            { "IntFunctionDescription", "Integrates a given vector numerically by summing up all entries and returns the antiderivative vector." },
            { "IntFunctionLink", "http://en.wikipedia.org/wiki/Numerical_integration" },
            { "IntFunctionDescriptionForMatrix", "Integrates a given vector numerically by summing up all entries and returns the antiderivative vector." },
            { "IntFunctionExampleForMatrix1", "Integrates the function values given in the matrix and returns the antiderivative matrix [0,1,3,6,8;0,2,3,3,2]." },
            { "LinfitFunctionDescription", "Linear fitting by finding coefficients for a linear combination of functions. Curve fitting is the process of constructing a curve, or mathematical function, that has the best fit to a series of data points, possibly subject to constraints. Curve fitting can involve either interpolation, where an exact fit to the data is required, or smoothing, in which a smooth function is constructed that approximately fits the data." },
            { "LinfitFunctionLink", "http://en.wikipedia.org/wiki/Curve_fitting" },
            { "LinfitFunctionDescriptionForMatrixMatrixMatrix", "Linfit finds the coefficients of a linear combination of n functions, f_j(x(i)) to y(i), in a least squares sense. The result p is a row vector of length n containing the coefficients, i.e. p(1) * f_1 + p(2) * f_2 + p(3) * f_3 ... + p(n) * f_n." },
            { "LinfitFunctionExampleForMatrixMatrixMatrix1", "fits the error function with the function p(1) * x + p(2) * x.^3 + p(3) * tan(x). The result is p = [-0.149151; 0.006249; 1.291217]" },
            { "LinfitFunctionDescriptionForMatrixMatrixFunction", "Linfit finds the coefficients of a linear combination of n functions, f_j(x(i)) to y(i), in a least squares sense. The result is the fit function p(1) * f_1 + p(2) * f_2 + p(3) * f_3 ... + p(n) * f_n." },
            { "LinfitFunctionExampleForMatrixMatrixFunction1", "fits the error function with the function p(1) * x + p(2) * x.^3 + p(3) * tan(x). The result is a function evaluating -0.149151 * x + 0.006249 * x.^3 + 1.291217 * tanh(x)]" },
            { "OdeFunctionDescription", "Solves one dimensional ordinary differential equations in the form x'(t) = f(t, x(t))." },
            { "OdeFunctionLink", "http://en.wikipedia.org/wiki/Ordinary_differential_equation" },
            { "OdeFunctionDescriptionForFunctionMatrixScalar", "Searches for a solution of the differential equation x'(t) = f(t, x) for a given a lambda expression f with two arguments t and x within the range specified as a vector and the starting value of x(t) at t(0) (the first value for t)." },
            { "OdeFunctionExampleForFunctionMatrixScalar1", "Solves the DEQ x'(t) + x(t) = 0 and gets the solution vector, which is exp(-t) within the specified point range." },
            { "OdeFunctionExampleForFunctionMatrixScalar2", "Solves the DEQ x'(t) = x(t) - t and gets the solution vector, which is 1 / 2 * exp(t) + t + 1 within the specified point range." },
            { "PolyfitFunctionDescription", "Polynomial curve fitting by finding coefficients for constructing a polynom with degree n. Curve fitting is the process of constructing a curve, or mathematical function, that has the best fit to a series of data points, possibly subject to constraints. Curve fitting can involve either interpolation, where an exact fit to the data is required, or smoothing, in which a smooth function is constructed that approximately fits the data." },
            { "PolyfitFunctionLink", "http://en.wikipedia.org/wiki/Curve_fitting" },
            { "PolyfitFunctionDescriptionForMatrixMatrixScalar", "Polyfit finds the coefficients of a polynomial p(x) of degree n that fits the data, p(x(i)) to y(i), in a least squares sense. The result p is a row vector of length n + 1 containing the polynomial coefficients in ascending powers, i.e. p(1) + p(2) * x + p(3) * x^2 ... + p(n + 1) * x^n." },
            { "PolyfitFunctionExampleForMatrixMatrixScalar1", "Evaluates the polynom of degree 6 of the error function between 0 and 2.5. The result is are coefficients for a polynom like p(x) = 0.0084 * x^6 - 0.0983 * x^5 + 0.4217 * x^4 - 0.7435 * x^3 + 0.1471 * x^2 + 1.1064 * x + 0.0004." },
            { "PolyvalFunctionDescription", "The function provides polynomial evaluation. In mathematics, a polynomial is an expression of finite length constructed from variables (also called indeterminates) and constants, using only the operations of addition, subtraction, multiplication, and non-negative integer exponents. However, the division by a constant is allowed, because the multiplicative inverse of a non zero constant is also a constant." },
            { "PolyvalFunctionLink", "http://en.wikipedia.org/wiki/Polynomial" },
            { "PolyvalFunctionDescriptionForMatrixMatrix", "The function returns the value of a polynomial of degree n evaluated at X. The input argument p is a vector of length n + 1 whose elements are the coefficients in ascending powers of the polynomial to be evaluated." },
            { "PolyvalFunctionExampleForMatrixMatrix1", "The polynomial p(x) = 3 * x^2 + 2 * x + 1 is evaluated at x = 5, 7, and 9 with the result 86, 162, 262." },
            { "PolyvalFunctionDescriptionForMatrixScalar", "The function returns the value of a polynomial of degree n evaluated at z. The input argument p is a vector of length n + 1 whose elements are the coefficients in ascending powers of the polynomial to be evaluated." },
            { "PolyvalFunctionExampleForMatrixScalar1", "The polynomial p(z) = 3 * z^2 + 2 * z + 1 is evaluated at z = 5 with the result 86." },
            { "RootFunctionDescription", "A root-finding algorithm is a numerical method, or algorithm, for finding a value x such that f(x) = 0, for a given function f. Such an x is called a root of the function f." },
            { "RootFunctionLink", "http://en.wikipedia.org/wiki/Zero_of_a_function" },
            { "RootFunctionDescriptionForFunctionScalar", "This function calls finds the root of f(x) that is the closest to the given value of x. The output is a value x0, which has the property that f(x0) = 0. There might be more roots depending on the starting value of x." },
            { "RootFunctionExampleForFunctionScalar1", "Returns the value of -1, which has been found as a root of the function f(x) = x^2 + x. The starting value of x has been chosen to -2." },
            { "RootFunctionExampleForFunctionScalar2", "Returns the value of 0, which has been found as a root of the function f(x) = x^2 + x. The starting value of x has been chosen to 0." },
            { "SimpsFunctionDescription", "Integrates a given vector of values with Simpson's rule (perfect for third order polynomials, i.e. cubic functions)." },
            { "SimpsFunctionLink", "http://en.wikipedia.org/wiki/Simpson's_rule" },
            { "SimpsFunctionDescriptionForMatrixMatrix", "Computes the integral for a given range of y values with its x vector." },
            { "SimpsFunctionExampleForMatrixMatrix1", "Computes the value of the sinus function between 0 and pi (analytic result is 2)." },
            { "SplineFunctionDescription", "Interpolates points between given sample values." },
            { "SplineFunctionLink", "http://en.wikipedia.org/wiki/Spline_(mathematics)" },
            { "SplineFunctionDescriptionForMatrixScalar", "Generates the y value for a single point with given sample data." },
            { "SplineFunctionExampleForMatrixScalar1", "Interpolates the y value for x = 2 in this quadratic function. The final outcome is slightly greater than 4." },
            { "SplineFunctionDescriptionForMatrixMatrix", "Generates the y values for a vector of points with given sample data." },
            { "SplineFunctionExampleForMatrixMatrix1", "Interpolates the y values for this x vector in the quadratic function. The final outcome is a small derivation of the real values." },
            { "RandbFunctionDescription", "Generates a matrix with binomial distributed random values. In probability theory and statistics, the binomial distribution is the discrete probability distribution of the number of successes in a sequence of n independent yes/no experiments, each of which yields success with probability p. Such a success/failure experiment is also called a Bernoulli experiment or Bernoulli trial; when n = 1, the binomial distribution is a Bernoulli distribution. The binomial distribution is the basis for the popular binomial test of statistical significance." },
            { "RandbFunctionLink", "http://en.wikipedia.org/wiki/Binomial_distribution" },
            { "RandbFunctionDescriptionForVoid", "Generates one binomial distributed random value with p set to 0.5 and n set to 1." },
            { "RandbFunctionExampleForVoid1", "Outputs a scalar that has been generated with respect to the distribution." },
            { "RandbFunctionDescriptionForScalar", "Generates a n-by-n matrix with binomial distributed random values with p set to 0.5 and n set to 1." },
            { "RandbFunctionExampleForScalar1", "Gives a 3x3 matrix with binomial dist. rand. values." },
            { "RandbFunctionDescriptionForScalarScalar", "Generates a m-by-n matrix with binomial distributed random values with p set to 0.5 and n set to 1." },
            { "RandbFunctionExampleForScalarScalar1", "Gives a 3x1 matrix with binomial dist. rand. values." },
            { "RandbFunctionDescriptionForScalarScalarScalarScalar", "Generates a m-by-n matrix with binomial distributed random values with a custom p (scale) and n (shape) parameter." },
            { "RandbFunctionExampleForScalarScalarScalarScalar1", "Gives a 3x1 matrix with binomial dist. rand. values around 10 with probability parameter p set to 0.5 and trials parameter n set to 20." },
            { "RandeFunctionDescription", "Generates a matrix with exponentially distributed random values. In probability theory and statistics, the exponential distribution (a.k.a. negative exponential distribution) is a family of continuous probability distributions. It describes the time between events in a Poisson process, i.e. a process in which events occur continuously and independently at a constant average rate. It is the continuous analogue of the geometric distribution." },
            { "RandeFunctionLink", "http://en.wikipedia.org/wiki/Exponential_distribution" },
            { "RandeFunctionDescriptionForVoid", "Generates one exponentially distributed random value around 0 with lambda 1." },
            { "RandeFunctionExampleForVoid1", "Outputs a scalar that has been generated with respect to the distribution." },
            { "RandeFunctionDescriptionForScalar", "Generates a n-by-n matrix with exponentially distributed random values with lambda set to 1." },
            { "RandeFunctionExampleForScalar1", "Gives a 3x3 matrix with normally dist. rand. values." },
            { "RandeFunctionDescriptionForScalarScalar", "Generates a m-by-n matrix with exponentially distributed random values with lambda set to 1." },
            { "RandeFunctionExampleForScalarScalar1", "Gives a 3x1 matrix with normally dist. rand. values." },
            { "RandeFunctionDescriptionForScalarScalarScalar", "Generates a m-by-n matrix with exponentially distributed random values that have been generated with a specified lambda." },
            { "RandeFunctionExampleForScalarScalarScalar1", "Gives a 3x1 matrix with exponentially distributed random values with lambda = 2.5." },
            { "RandFunctionDescription", "Generates a matrix with uniformly distributed random values between 0 and 1." },
            { "RandFunctionLink", "http://en.wikipedia.org/wiki/Uniform_distribution_(continuous)" },
            { "RandFunctionDescriptionForVoid", "Generates one uniformly dist. random value between 0 and 1." },
            { "RandFunctionDescriptionForScalar", "Generates a n-by-n matrix with uniformly dist. random values between 0 and 1." },
            { "RandFunctionExampleForScalar1", "Generates a 5x5 matrix with an uni. dist. rand. value in each cell." },
            { "RandFunctionDescriptionForScalarScalar", "Generates a n-by-m matrix with uniformly dist. random values between 0 and 1." },
            { "RandFunctionExampleForScalarScalar1", "Generates a 5x2 matrix with an uni. dist. rand. value in each cell." },
            { "RandgFunctionDescription", "Generates a matrix with gamma distributed random values. In probability theory and statistics, the gamma distribution is a two-parameter family of continuous probability distributions." },
            { "RandgFunctionLink", "http://en.wikipedia.org/wiki/Gamma_distribution" },
            { "RandgFunctionDescriptionForVoid", "Generates one gamma distributed random value with theta and k set to 1." },
            { "RandgFunctionExampleForVoid1", "Outputs a scalar that has been generated with respect to the distribution." },
            { "RandgFunctionDescriptionForScalar", "Generates a n-by-n matrix with gamma distributed random values with theta and k set to 1." },
            { "RandgFunctionExampleForScalar1", "Gives a 3x3 matrix with gamma dist. rand. values." },
            { "RandgFunctionDescriptionForScalarScalar", "Generates a m-by-n matrix with gamma distributed random values with theta and k set to 1." },
            { "RandgFunctionExampleForScalarScalar1", "Gives a 3x1 matrix with gamma dist. rand. values." },
            { "RandgFunctionDescriptionForScalarScalarScalarScalar", "Generates a m-by-n matrix with gamma distributed random values with a custom theta (scale) and k (shape) parameter." },
            { "RandgFunctionExampleForScalarScalarScalarScalar1", "Gives a 3x1 matrix with gamma dist. rand. values around 10 with scale parameter theta set to 10 and shape parameter k set to 2.5." },
            { "RandiFunctionDescription", "Generates a matrix with uniformly distributed integer values." },
            { "RandiFunctionLink", "http://en.wikipedia.org/wiki/Uniform_distribution_(discrete)" },
            { "RandiFunctionDescriptionForVoid", "Generates one uniformly dist. integer value between min and max." },
            { "RandiFunctionExampleForVoid1", "Gets a random integer between 0 and 10 (both inclusive)." },
            { "RandiFunctionDescriptionForScalarScalarScalar", "Generates a n-by-n matrix with uniformly dist. integer values between min and max." },
            { "RandiFunctionExampleForScalarScalarScalar1", "Gets a 5x5 matrix with random integers between 0 and 10 (both inclusive)." },
            { "RandiFunctionDescriptionForScalarScalarScalarScalar", "Generates a m-by-n matrix with uniformly dist. integer values between min and max." },
            { "RandiFunctionExampleForScalarScalarScalarScalar1", "Gets a 5x2 matrix with random integers between 0 and 10 (both inclusive)." },
            { "RandlFunctionDescription", "Generates a matrix with Laplace distributed random values. In probability theory and statistics, the Laplace distribution is a continuous probability distribution named after Pierre-Simon Laplace. It is also sometimes called the double exponential distribution, because it can be thought of as two exponential distributions (with an additional location parameter) spliced together back-to-back, but the term double exponential distribution is also sometimes used to refer to the Gumbel distribution. The difference between two independent identically distributed exponential random variables is governed by a Laplace distribution, as is a Brownian motion evaluated at an exponentially distributed random time. Increments of Laplace motion or a variance gamma process evaluated over the time scale also have a Laplace distribution." },
            { "RandlFunctionLink", "http://en.wikipedia.org/wiki/Laplace_distribution" },
            { "RandlFunctionDescriptionForVoid", "Generates one Laplace distributed random value with mu set to 0 and b set to 1." },
            { "RandlFunctionExampleForVoid1", "Outputs a scalar that has been generated with respect to the distribution." },
            { "RandlFunctionDescriptionForScalar", "Generates a n-by-n matrix with Laplace distributed random values with mu set to 0 and b set to 1." },
            { "RandlFunctionExampleForScalar1", "Gives a 3x3 matrix with Laplace dist. rand. values." },
            { "RandlFunctionDescriptionForScalarScalar", "Generates a m-by-n matrix with Laplace distributed random values with mu set to 0 and b set to 1." },
            { "RandlFunctionExampleForScalarScalar1", "Gives a 3x1 matrix with Laplace dist. rand. values." },
            { "RandlFunctionDescriptionForScalarScalarScalarScalar", "Generates a m-by-n matrix with Laplace distributed random values with a custom mu (mean) and b (variance) parameter." },
            { "RandlFunctionExampleForScalarScalarScalarScalar1", "Gives a 3x1 matrix with Laplace dist. rand. values around 10 with the mean mu set to 10 and variance parameter b set to 2.5. The variance scales with b^2, such that the standard deviation scales with b." },
            { "RandnFunctionDescription", "Generates a matrix with normal distributed random values. In probability theory, the normal (or Gaussian) distribution is a continuous probability distribution, defined on the entire real line, that has a bell-shaped probability density function, known as the Gaussian function or informally as the bell curve." },
            { "RandnFunctionLink", "http://en.wikipedia.org/wiki/Normal_distribution" },
            { "RandnFunctionDescriptionForVoid", "Generates one normally (gaussian) distributed random value around 0 with standard deviation 1." },
            { "RandnFunctionDescriptionForScalar", "Generates a n-by-n matrix with normally (gaussian) distributed random value around 0 with standard deviation 1." },
            { "RandnFunctionExampleForScalar1", "Gives a 3x3 matrix with normally dist. rand. values." },
            { "RandnFunctionDescriptionForScalarScalar", "Generates a m-by-n matrix with normally (gaussian) distributed random value around 0 with standard deviation 1." },
            { "RandnFunctionExampleForScalarScalar1", "Gives a 3x1 matrix with normally dist. rand. values." },
            { "RandnFunctionDescriptionForScalarScalarScalarScalar", "Generates a m-by-n matrix with normally (gaussian) distributed random value around mu with standard deviation sigma." },
            { "RandnFunctionExampleForScalarScalarScalarScalar1", "Gives a 3x1 matrix with normally dist. rand. values around 10 with standard deviation sigma." },
            { "RandpFunctionDescription", "Generates a matrix with Poisson distributed random values. In probability theory and statistics, the Poisson distribution is a discrete probability distribution that expresses the probability of a given number of events occurring in a fixed interval of time and / or space if these events occur with a known average rate and independently of the time since the last event. The Poisson distribution can also be used for the number of events in other specified intervals such as distance, area or volume." },
            { "RandpFunctionLink", "http://en.wikipedia.org/wiki/Poisson_distribution" },
            { "RandpFunctionDescriptionForVoid", "Generates one Poisson distributed random value with lambda set to 1." },
            { "RandpFunctionExampleForVoid1", "Outputs a scalar that has been generated with respect to the distribution." },
            { "RandpFunctionDescriptionForScalar", "Generates a n-by-n matrix with Poisson distributed random values with lambda set to 1." },
            { "RandpFunctionExampleForScalar1", "Gives a 3x3 matrix with Poisson dist. rand. values." },
            { "RandpFunctionDescriptionForScalarScalar", "Generates a m-by-n matrix with Poisson distributed random values with lambda set to 1." },
            { "RandpFunctionExampleForScalarScalar1", "Gives a 3x1 matrix with Poisson dist. rand. values." },
            { "RandpFunctionDescriptionForScalarScalarScalar", "Generates a m-by-n matrix with Poisson distributed random values with a custom lambda (mean)." },
            { "RandpFunctionExampleForScalarScalarScalar1", "Gives a 3x1 matrix with Poisson dist. rand. values with the mean mu set to 10." },
            { "RandrFunctionDescription", "Generates a matrix with Rayleigh distributed random values. In probability theory and statistics, the Rayleigh distribution is a continuous probability distribution. A Rayleigh distribution is often observed when the overall magnitude of a vector is related to its directional components. One example where the Rayleigh distribution naturally arises is when wind velocity is analyzed into its orthogonal 2-dimensional vector components. Assuming that the magnitude of each component is uncorrelated, normally distributed with equal variance, and zero mean, then the overall wind speed (vector magnitude) will be characterized by a Rayleigh distribution. A second example of the distribution arises in the case of random complex numbers whose real and imaginary components are independently and identically distributed Gaussian with equal variance and zero mean. In that case, the absolute value of the complex number is Rayleigh-distributed. The distribution is named after Lord Rayleigh." },
            { "RandrFunctionLink", "http://en.wikipedia.org/wiki/Rayleigh_distribution" },
            { "RandrFunctionDescriptionForVoid", "Generates one Rayleigh distributed random value with sigma set to 1." },
            { "RandrFunctionExampleForVoid1", "Outputs a scalar that has been generated with respect to the distribution." },
            { "RandrFunctionDescriptionForScalar", "Generates a n-by-n matrix with Rayleigh distributed random values with sigma set to 1." },
            { "RandrFunctionExampleForScalar1", "Gives a 3x3 matrix with Rayleigh dist. rand. values." },
            { "RandrFunctionDescriptionForScalarScalar", "Generates a m-by-n matrix with Rayleigh distributed random values with sigma set to 1." },
            { "RandrFunctionExampleForScalarScalar1", "Gives a 3x1 matrix with Rayleigh dist. rand. values." },
            { "RandrFunctionDescriptionForScalarScalarScalar", "Generates a m-by-n matrix with Rayleigh distributed random values with a custom sigma (mode)." },
            { "RandrFunctionExampleForScalarScalarScalar1", "Gives a 3x1 matrix with Rayleigh dist. rand. values with the mode sigma set to 10." },
            { "RandwFunctionDescription", "Generates a matrix with Weibull distributed random values. In probability theory and statistics, the Weibull distribution is a continuous probability distribution." },
            { "RandwFunctionLink", "http://en.wikipedia.org/wiki/Weibull_distribution" },
            { "RandwFunctionDescriptionForVoid", "Generates one Weibull distributed random value with lambda and k set to 1." },
            { "RandwFunctionExampleForVoid1", "Outputs a scalar that has been generated with respect to the distribution." },
            { "RandwFunctionDescriptionForScalar", "Generates a n-by-n matrix with Weibull distributed random values with lambda and k set to 1." },
            { "RandwFunctionExampleForScalar1", "Gives a 3x3 matrix with Weibull dist. rand. values." },
            { "RandwFunctionDescriptionForScalarScalar", "Generates a m-by-n matrix with Weibull distributed random values with lambda and k set to 1." },
            { "RandwFunctionExampleForScalarScalar1", "Gives a 3x1 matrix with Weibull dist. rand. values." },
            { "RandwFunctionDescriptionForScalarScalarScalarScalar", "Generates a m-by-n matrix with Weibull distributed random values with a custom lambda (scale) and k (shape) parameter." },
            { "RandwFunctionExampleForScalarScalarScalarScalar1", "Gives a 3x1 matrix with Weibull dist. rand. values around 10 with scale parameter lambda set to 10 and shape parameter k set to 2.5." },
            { "ZetaFunctionDescription", "The Riemann zeta function or Euler–Riemann zeta function, ζ(s), is a function of a complex variable s that analytically continues the sum of the infinite series with n = 1 to infinity, that sums 1 over n to the power of s. It converges when the real part of s is greater than 1." },
            { "GammaFunctionDescription", "Represents the gamma function, which is the analytic continuation of the faculty for non-integers. The gamma function is defined for all complex numbers except the non-positive integers. For complex numbers with a positive real part, it is defined via an improper integral that converges." },
            { "Bessel0FunctionDescription", "In mathematics, Bessel functions, first defined by the mathematician Daniel Bernoulli and generalized by Friedrich Bessel, are canonical solutions y(x) of Bessel's differential equation. This function represents Bessel functions of the first kind with order 0." },
            { "FaddeevaFunctionDescription", "The Faddeeva function or Kramp function is a scaled complex complementary error function. It is related to the Fresnel integral, to Dawson's integral, and to the Voigt function. The function also arises frequently in problems involving small-amplitude waves propagating through Maxwellian plasmas, and in particular appears in the plasma's permittivity from which dispersion relations are derived, hence it is sometimes referred to as the plasma dispersion function." },
            { "BesselFunctionDescription", "In mathematics, Bessel functions, first defined by the mathematician Daniel Bernoulli and generalized by Friedrich Bessel, are canonical solutions y(x) of Bessel's differential equation. This function represents Bessel functions of the first kind with the given order." },
            { "BesselFunctionDescriptionForScalarScalar", "Computes the Bessel function of an arbitrary order for the given argument and returns the function's value." },
            { "BesselFunctionExampleForScalarScalar1", "Computes the Bessel function of the first kind with order 3 for the argument 0.4 and returns a scalar with the computed value." },
            { "BesselFunctionDescriptionForScalarMatrix", "Computes the Bessel function of an arbitrary order for the given arguments. The return matrix has the same dimensions as the input matrix." },
            { "BesselFunctionExampleForScalarMatrix1", "Computes the Bessel function of the first kind with order 3 for the arguments 0, 1, 2, 3 and 4. Returns a matrix (vector) with the computed values." },
            { "Bessel1FunctionDescription", "In mathematics, Bessel functions, first defined by the mathematician Daniel Bernoulli and generalized by Friedrich Bessel, are canonical solutions y(x) of Bessel's differential equation. This function represents Bessel functions of the first kind with order 1." },
            { "ErfFunctionDescription", "In mathematics, the error function (also called the Gauss error function) is a special function (non-elementary) of sigmoid shape which occurs in probability, statistics and partial differential equations. This function returns the error function of the specified number." },
            { "ErfcFunctionDescription", "In mathematics, the error function (also called the Gauss error function) is a special function (non-elementary) of sigmoid shape which occurs in probability, statistics and partial differential equations. This function returns the complementary error function of the specified number." },
            { "DigammaFunctionDescription", "In mathematics, the digamma function is defined as the logarithmic derivative of the gamma function. The digamma function, often denoted also as ψ0(x), ψ0(x) or  (after the shape of the archaic Greek letter Ϝ digamma), is related to the harmonic numbers." },
            { "SumFunctionDescription", "Computes the sum of a given vector or the sum for each column vector of a matrix." },
            { "SumFunctionDescriptionForScalar", "Just returns the value, since the sum of one scalar is the scalar itself." },
            { "SumFunctionDescriptionForMatrix", "Evaluates the vector(s) and outputs the sum(s) of the vector(s)." },
            { "SumFunctionExampleForMatrix1", "Computes the sum of the vector, which is 27 in this case." },
            { "SumFunctionExampleForMatrix2", "Computes the sums of the two vectors, which are 16 and 11 in this case." },
            { "SqrtFunctionDescription", "The square root function raises the element to the power 1/2." },
            { "SplitFunctionDescription", "Splits a string into tokens using a list of separators." },
            { "SplitFunctionDescriptionForStringArguments", "Splits a string into tokens using a list of separators." },
            { "SplitFunctionExampleForStringArguments1", "Returns a list of all tokens." },
            { "SortFunctionDescription", "Sorts the columns of a given matrix or the complete vector." },
            { "SortFunctionDescriptionForMatrix", "Gives back the sorted columns of the passed matrix. The sorting is done from the lowest to the highest number, i.e. in ascending order." },
            { "SortFunctionExampleForMatrix1", "Sorts the vector [1, 2, 0, 9, 5], resulting in [0, 1, 2, 5, 9]." },
            { "SortFunctionExampleForMatrix2", "Sorts the matrix [1, 2, 0, 9, 5; 10, 8, 4, 6, 1], resulting in [0, 1, 2, 5, 9; 1, 4, 6, 8, 10]." },
            { "SizeFunctionDescription", "Outputs the dimensions (size) of the given object." },
            { "SizeFunctionDescriptionForMatrix", "Returns a row vector containing the number of rows (1, 1) and the number of columns (1, 2)." },
            { "SizeFunctionExampleForMatrix1", "Results in a vector with the elements 1 and 5, since we have 5 columns and 1 row." },
            { "SizeFunctionExampleForMatrix2", "Results in a vector with the elements 2 and 2, since we have 2 columns and 2 rows." },
            { "SizeFunctionDescriptionForScalar", "Returns a row vector containing the number of rows (1, 1) and the number of columns (1, 2), which is 1 and 1 for any scalar." },
            { "SizeFunctionDescriptionForString", "Returns a row vector containing the number of rows (1, 1) and the number of columns (1, 2), which is 1 and the number of characters for any string." },
            { "SizeFunctionExampleForString1", "Results in a vector with the elements 1 and 5, since we have 5 characters." },
            { "SignFunctionDescription", "Represents the sign function." },
            { "SignFunctionDescriptionForScalar", "Returns -1 for values smaller than 0, +1 for values greater than zero, else 0." },
            { "SignFunctionExampleForScalar1", "Results in -1." },
            { "SignFunctionExampleForScalar2", "Results in +1." },
            { "RoundFunctionDescription", "Represents the round function to round up or down to the nearest integer." },
            { "RealFunctionDescription", "Keeps only the real part of the passed matrix or scalar value and omits the imaginary part. If z = x + i * y, then real(z) is just x." },
            { "ProdFunctionDescription", "Computes the product of a given vector or the sum for each column vector of a matrix." },
            { "ProdFunctionDescriptionForScalar", "Just returns the value, since the product of one scalar is the scalar itself." },
            { "ProdFunctionDescriptionForMatrix", "Evaluates the vector(s) and outputs the product(s) of the vector(s)." },
            { "ProdFunctionExampleForMatrix1", "Computes the product of the vector, which is -5040 in this case." },
            { "ProdFunctionExampleForMatrix2", "Computes the product of the two vectors, which are 105 and -48 in this case." },
            { "MinFunctionDescription", "Computes the minimum value of a given vector or minimum value of each column vector of a matrix." },
            { "MinFunctionDescriptionForMatrix", "Evaluates the vector(s) and outputs the minimum scalar(s) in the vector(s)." },
            { "MinFunctionExampleForMatrix1", "Finds the minimum in the vector, which is -1 in this case." },
            { "MinFunctionExampleForMatrix2", "Finds the minimums of the vectors (of the matrix), which are 1 and -1 in this case." },
            { "MaxFunctionDescription", "Computes the maximum value of a given vector or maximum value of each column vector of a matrix." },
            { "MaxFunctionDescriptionForMatrix", "Evaluates the vector(s) and outputs the maximum scalar(s) in the vector(s)." },
            { "MaxFunctionExampleForMatrix1", "Finds the maximum in the vector, which is 7 in this case." },
            { "MaxFunctionExampleForMatrix2", "Finds the maximums of the vectors (of the matrix), which are 7 and 6 in this case." },
            { "LogFunctionDescription", "This is the more general logarithm, i.e. by default the natural logarith, but with the ability to define the basis." },
            { "LogFunctionDescriptionForScalar", "Evaluates the natural logarithm of the given scalar value." },
            { "LogFunctionExampleForScalar1", "The natural logarithm for Euler's constant is 1." },
            { "LogFunctionDescriptionForScalarScalar", "Evaluates the custom logarithm of the given scalar value." },
            { "LogFunctionExampleForScalarScalar1", "The binary logarithm for the argument 16 is 4." },
            { "LogFunctionDescriptionForMatrix", "Evaluates the natural logarithm of the values of the given matrix." },
            { "LogFunctionExampleForMatrix1", "Generates a 10x10 matrix with integer random numbers between 0 and 1000. Returns a matrix with their natural logarithms." },
            { "LogFunctionDescriptionForMatrixScalar", "Evaluates the custom logarithm of the values of the given matrix." },
            { "LogFunctionExampleForMatrixScalar1", "Generates a 10x10 matrix with integer random numbers between 0 and 1000. Returns a matrix that contains the magnitudes of their values." },
            { "LnFunctionDescription", "This is the natural logarithm, i.e. used to the basis of euler's number." },
            { "Log2FunctionDescription", "This is binary logarithm, i.e. the logarithm with base 2." },
            { "Log10FunctionDescription", "This is decimal logarithm, i.e. the logarithm with base 10." },
            { "LengthFunctionDescription", "Outputs the length of the given object." },
            { "LengthFunctionDescriptionForMatrix", "Returns a scalar that is basically the number of rows times the number of columns." },
            { "LengthFunctionExampleForMatrix1", "Results in a scalar value of 10, since we have 5 columns and 2 rows." },
            { "LengthFunctionDescriptionForScalar", "Returns the length of a scalar, which is just 1." },
            { "LengthFunctionDescriptionForString", "Returns the length of the string, which is the number of characters." },
            { "LengthFunctionExampleForString1", "This is evaluated to be 5, which is the number of characters in the given string." },
            { "ImagFunctionDescription", "Keeps only the imaginary part of the passed matrix or scalar value and omits the real part. If z = x + i * y, then imag(z) is just y." },
            { "HeavisideFunctionDescription", "Represents the heaviside step function." },
            { "HeavisideFunctionDescriptionForScalar", "Returns 0 for values smaller or equal to 0, else 1." },
            { "HeavisideFunctionExampleForScalar1", "Results in 0." },
            { "HeavisideFunctionExampleForScalar2", "Results in 1." },
            { "FloorFunctionDescription", "Represents the floor function to round down." },
            { "FixFunctionDescription", "Represents the round function to round towards zero." },
            { "FactorialFunctionDescription", "Represents the factorial function, which is used for the ! operator and integer expressions." },
            { "ExpFunctionDescription", "This is the exponential function, i.e. sum of n = 0 to infinity of x^n / n!." },
            { "DimFunctionDescription", "Outputs the dimension of the given object." },
            { "DimFunctionDescriptionForMatrix", "Returns a scalar containing the dimension of the given matrix." },
            { "DimFunctionExampleForMatrix1", "Results in the value 5." },
            { "DimFunctionDescriptionForScalar", "Returns a scalar containing the length of the given scalar, which is always 1." },
            { "DimFunctionDescriptionForString", "Returns a scalar containing the length of the given string." },
            { "DimFunctionExampleForString1", "Results in the value 5." },
            { "ConjFunctionDescription", "Conjugates the given complex number to transform it from x + iy to x - iy." },
            { "CeilFunctionDescription", "Represents the ceil function to round up." },
            { "ArgFunctionDescription", "This is a function operating on complex numbers (visualised as a flat plane). It gives the angle between the line joining the point to the origin and the positive real axis known as an argument of the point (that is, the angle between the half-lines of the position vector representing the number and the positive real axis)." },
            { "AbsFunctionDescription", "Represents the abs function." },
            { "AbsFunctionDescriptionForScalar", "Gives the absolute value of the provided scalar." },
            { "AbsFunctionExampleForScalar1", "Results in 1." },
            { "AbsFunctionExampleForScalar2", "Results in 5." },
            { "AbsFunctionExampleForScalar3", "Results in 7." },
            { "AbsFunctionDescriptionForMatrix", "Gives the absolute value of the provided vector, or the determinant of the given matrix." },
            { "AbsFunctionExampleForMatrix1", "Results in 4." },
            { "AbsFunctionExampleForMatrix2", "Results in the square root of 14." },
            { "XCorFunctionDescription", "In probability theory and statistics, cross-correlation is a measure of how much two random variables are correlated at different offsets." },
            { "XCorFunctionLink", "http://en.wikipedia.org/wiki/Cross-correlation" },
            { "XCorFunctionDescriptionForMatrixMatrix", "This function returns a vector with cross-correlations for diferent offsets. All matrices are treated as vectors." },
            { "XCorFunctionExampleForMatrixMatrix1", "Gives the cross-correlation for two independent random variables of variance [1, 4] and different offsets." },
            { "XCorFunctionDescriptionForMatrixMatrixScalar", "This function returns a vector with the defined cross-correlations for diferent offsets. All matrices are treated as vectors." },
            { "XCorFunctionExampleForMatrixMatrixScalar1", "Gives the first 4 cross-correlations for two independent random variables of variance [1, 4]." },
            { "VarFunctionDescription", "In probability theory and statistics, the variance is a measure of how far a set of numbers is spread out." },
            { "VarFunctionLink", "http://en.wikipedia.org/wiki/Variance" },
            { "VarFunctionDescriptionForMatrix", "The variance is obtained by calculating the data set consisting of each data point in the original data set subtracting the arithmetic mean for the data set, and then squaring it." },
            { "VarFunctionExampleForMatrix1", "Gives the variance for throwing a perfect sided die, which is roughly 2.9." },
            { "VarFunctionExampleForMatrix2", "Computes the variance for each column of the given matrix." },
            { "MedianFunctionDescription", "The median is defined as the data point that falls exactly at the midpoint of a set of data points. If there is an even number of points, then the average is taken of the middle two points." },
            { "MedianFunctionLink", "http://en.wikipedia.org/wiki/Median" },
            { "MedianFunctionDescriptionForMatrix", "Computes the median of the given values." },
            { "MedianFunctionExampleForMatrix1", "Evaluates the values 1, 5, 2, 8, 7 and computes the median, which is 5." },
            { "MedianFunctionExampleForMatrix2", "Evaluates the values 1, 6, 2, 8, 7, 2 and computes the median, which is 4." },
            { "MeanFunctionDescription", "Calculates the geometric mean, which is the n-th root of the product of n elements." },
            { "MeanFunctionLink", "http://en.wikipedia.org/wiki/Geometric_mean" },
            { "MeanFunctionDescriptionForMatrix", "The geometric mean is similar to the arithmetic mean in that it is a type of average for the data, except it has a rather different way of calculating it." },
            { "MeanFunctionExampleForMatrix1", "Computes the geometric mean of 1, 4 and 8, i.e. (1 * 3 * 9)^(1 / 3). The result is 3." },
            { "MeanFunctionExampleForMatrix2", "Computes the geometric mean of 1, 4 and 8 as well as 2, 5 and 7. The result is a 1x2 matrix." },
            { "LsqFunctionDescription", "The method of least squares is a standard approach to the approximate solution of overdetermined systems, i.e., sets of equations in which there are more equations than unknowns." },
            { "LsqFunctionLink", "http://en.wikipedia.org/wiki/Least_squares" },
            { "LsqFunctionDescriptionForMatrix", "In statistics and mathematics, linear least squares is an approach to fitting a mathematical or statistical model to data in cases where the idealized value provided by the model for any data point is expressed linearly in terms of the unknown parameters of the model." },
            { "LsqFunctionExampleForMatrix1", "Computes the slope and the offset for a linear function a * x + b that should fit the points (1, 6), (2, 5), (3, 7) and (4, 10). The result is a = 1.4 and b = 3.5." },
            { "LsqFunctionDescriptionForMatrixMatrix", "In statistics and mathematics, linear least squares is an approach to fitting a mathematical or statistical model to data in cases where the idealized value provided by the model for any data point is expressed linearly in terms of the unknown parameters of the model." },
            { "LsqFunctionExampleForMatrixMatrix1", "Computes the slope and the offset for a linear function a * x + b that should fit the points (1, 6), (2, 5), (3, 7) and (4, 10). The result is a = 1.4 and b = 3.5." },
            { "JackknifeFunctionDescription", "In statistics the Jackknife is a method to estimate the statistical error of observables measured on a set of data." },
            { "JackknifeFunctionLink", "http://en.wikipedia.org/wiki/Resampling_(statistics)" },
            { "JackknifeFunctionDescriptionForMatrixScalarFunction", "This function implements the blocked Jackknife for functions of a set of vector data saved as the rows of a matrix. The function has to take a matrix of data as the first argument and has to return either a scalar or a matrix." },
            { "JackknifeFunctionExampleForMatrixScalarFunction1", "Gives the statistical Jackknife estimate for the mean and the error on the mean of a dataset with 100 measurements, mean [3, 10], and gaussian noise of width [1, 4] for a blocksize of 20." },
            { "JackknifeFunctionDescriptionForMatrixScalarFunctionArguments", "This function implements the blocked Jackknife for functions of a set of vector data saved as the rows of a matrix. The function has to take a matrix of data as the first argument, can take constant other optional arguments, and has to return either a scalar or a matrix." },
            { "HmeanFunctionDescription", "Calculates the harmonic mean, which is the number of elements divided by the sum of the inverse of each element. The harmonic mean is the special case of the power mean. As it tends strongly toward the least elements of the list, it may (compared to the arithmetic mean) mitigate the influence of large outliers and increase the influence of small values." },
            { "HmeanFunctionLink", "http://en.wikipedia.org/wiki/Harmonic_mean" },
            { "HmeanFunctionDescriptionForMatrix", "The harmonic mean (sometimes called the subcontrary mean) is one of several kinds of average. Typically, it is appropriate for situations when the average of rates is desired." },
            { "HmeanFunctionExampleForMatrix1", "Computes the harmonic mean of 1, 4 and 8, i.e. 3 / (1 + 0.25 + 0.125). The result is 24/11 or 2.1818." },
            { "HmeanFunctionExampleForMatrix2", "Computes the harmonic mean of 1, 4 and 8, as well as 2, 5 and 7. The result is a 1x2 matrix." },
            { "HistogramFunctionDescription", "Computes a histogram that shows the distribution of data values." },
            { "HistogramFunctionDescriptionForMatrix", "Bins the elements in vector Y into 10 equally spaced containers and outputs the number of elements in each container in a row vector. If Y is an m-by-p matrix, histogram treats the columns of Y as vectors and outputs a 10-by-p matrix n. Each column of n contains the results for the corresponding column of Y. No elements of Y can be complex or of type integer." },
            { "HistogramFunctionExampleForMatrix1", "Places 100 uniformly generated random numbers into 10 bins with a spacing that should be approximately 0.1." },
            { "HistogramFunctionDescriptionForMatrixMatrix", "Here x is a vector, such that the distribution of Y among length(x) bins with centers specified by x. For example, if x is a 5-element vector, histogram distributes the elements of Y into five bins centered on the x-axis at the elements in x, none of which can be complex." },
            { "HistogramFunctionExampleForMatrixMatrix1", "Places 100 uniformly generated random numbers into 3 bins that center around 0.1, 0.5 and 0.9." },
            { "HistogramFunctionDescriptionForMatrixScalar", "Bins the elements in vector Y into nbins equally spaced containers and outputs the number of elements as before." },
            { "HistogramFunctionExampleForMatrixScalar1", "Places 100 uniformly generated random numbers into 20 bins with a spacing that should be approximately 0.05." },
            { "DistFunctionDescription", "Computes an approximation of the distribution of data values." },
            { "DistFunctionDescriptionForMatrixScalarScalar", "Returns a function which approximates the distribution of the data values in Y. For that Y is binned into nbins equally spaced containers. The approximation uses nParameters parameters to describe the data." },
            { "DistFunctionExampleForMatrixScalarScalar1", "Returns an approximate of the distribution of the data (two gaussians centered at 0 and 5 and relative height 1:2) binned in 40 bins and with 10 parameters." },
            { "DistFunctionDescriptionForMatrix", "Returns a function which approximates the distribution of the data values in Y. For that Y is binned into nbins equally spaced containers. The approximation uses nParameters parameters to describe the data." },
            { "DistFunctionExampleForMatrix1", "Returns an approximate of the distribution of the data (two gaussians centered at 0 and 5 and relative height 1:2) binned in about sqrt(1500) bins and about log(1500) parameters." },
            { "DevFunctionDescription", "In statistics and probability theory, standard deviation (represented by the symbol sigma, σ) shows how much variation or dispersion exists from the average (mean, or expected value)." },
            { "DevFunctionLink", "http://en.wikipedia.org/wiki/Standard_deviation" },
            { "DevFunctionDescriptionForMatrix", "Standard deviation is a very common calculation in statistical analysis, and is formally defined as the square root of the variance of the data set." },
            { "DevFunctionExampleForMatrix1", "Computes the standard deviation of those eight values. The result is 2." },
            { "CovFunctionDescription", "In probability theory and statistics, covariance is a measure of how much fluctuations in one variable are accompanied by a fluctuations in another variable." },
            { "CovFunctionLink", "http://en.wikipedia.org/wiki/Covariance" },
            { "CovFunctionDescriptionForMatrix", "This function returns a symmetric matrix with all variances on the diagonal and all covariances in the rest of the matrix." },
            { "CovFunctionExampleForMatrix1", "Gives the covariance matrix for two independent random variables of variance [1,4]. In the limit of infinite datasets the resulting covariance matrix has the variances [1, 4] on the diagonal and 0 on the off-diagonal parts, as the two randomvariables are uncorrelated." },
            { "CorFunctionDescription", "In probability theory and statistics, correlation is a measure of how much fluctuations in one variable are accompanied by a fluctuations in another variable. It is the covariance normalized with the variances." },
            { "CorFunctionLink", "http://en.wikipedia.org/wiki/Correlation_and_dependence" },
            { "CorFunctionDescriptionForMatrix", "This function returns a symmetric matrix with ones on the diagonal and all correlation coefficents in the rest of the matrix." },
            { "CorFunctionExampleForMatrix1", "Gives the correlation matrix for two independent random variables of variance [1, 4]. In the limit of infinite datasets the resulting correlation matrix has 0 on the off-diagonal parts, as the two random variables are uncorrelated." },
            { "BootstrapFunctionDescription", "In statistics the Bootstrap is a method to estimate the statistical error of observables measured on a set of data." },
            { "BootstrapFunctionLink", "http://en.wikipedia.org/wiki/Bootstrapping" },
            { "BootstrapFunctionDescriptionForMatrixScalarFunction", "This function implements the Bootstrap method for functions of a set of vector data saved as the rows of a matrix. The function has to take a matrix of data as the first argument and has to return either a scalar or a matrix." },
            { "BootstrapFunctionExampleForMatrixScalarFunction1", "Gives the statistical Bootstrap estimate for the mean and the error on the mean of a dataset with 100 measurements, mean [3, 10], and gaussian noise of width [1, 4] for 200 bootstrap samples." },
            { "BootstrapFunctionDescriptionForMatrixScalarFunctionArguments", "This function implements the Bootstrap method for functions of a set of vector data saved as the rows of a matrix. The function has to take a matrix of data as the first argument, can take constant other optional arguments, and has to return either a scalar or a matrix." },
            { "BootstrapFunctionExampleForMatrixScalarFunctionArguments1", "Gives the statistical Bootstrap estimate for the mean and the error on the mean of a dataset with 100 measurements, mean [3, 10], and gaussian noise of width [1, 4] for 200 bootstrap samples." },
            { "AvgFunctionDescription", "Calculates the arithmetic mean, which is the sum of n elements divided by n." },
            { "AvgFunctionLink", "http://en.wikipedia.org/wiki/Arithmetic_mean" },
            { "AvgFunctionDescriptionForMatrix", "The arithmetic mean is the naive way of averaging over a number of items. Here the arithmetic mean is taken, i.e. the sum over all items divided by the number of items." },
            { "AvgFunctionExampleForMatrix1", "Computes the arithmetic mean of 1, 4 and 8, i.e. (1 + 4 + 8) / 3. The result is 13 / 3 or 4.333." },
            { "AvgFunctionExampleForMatrix2", "Computes the arithmetic mean over the columns, i.e. the result is a row [1.5,2.5,2.5]." },
            { "ACorFunctionDescription", "In probability theory and statistics, auto-correlation is a measure of how much one random variables is correlated with itself at different offsets." },
            { "ACorFunctionLink", "http://en.wikipedia.org/wiki/Autocorrelation" },
            { "ACorFunctionDescriptionForMatrix", "This function returns a vector with auto-correlations for different offsets. All matrices are treated as vectors." },
            { "ACorFunctionExampleForMatrix1", "Gives the auto-correlation for a normal dirstributed random variables of variance 1 and different offsets." },
            { "ACorFunctionExampleForMatrixScalar1", "Gives the first 4 auto-correlations for a normal dirstributed random variables of variance 1." },
            { "WhoFunctionDescription", "Lists the available variables." },
            { "WhoFunctionDescriptionForVoid", "Lists all variables from the current workspace." },
            { "WhoFunctionDescriptionForString", "Lists variables from the current workspace using a filter." },
            { "WhoFunctionExampleForString1", "Lists all variables, which start with a small 'a'." },
            { "WhoFunctionExampleForString2", "Lists all variables, which contain 3 letters, starting with a small x, ending with a small b and any letter in between." },
            { "WhoFunctionDescriptionForArguments", "Lists variables from the current workspace using a filter." },
            { "WhoFunctionExampleForArguments1", "Lists all variables, which start with a small 'a' and the variable x." },
            { "WhoFunctionExampleForArguments2", "Lists the variables a and b, as well as all variables, which contain 3 letters, starting with a small x, ending with a small b and any letter in between." },
            { "VerFunctionDescription", "Returns the version of the YAMP parser engine." },
            { "VerFunctionDescriptionForVoid", "Gets a string containing the current version of the running YAMP engine." },
            { "VerFunctionExampleForVoid1", "Gets a string containing the version of YAMP." },
            { "TypeFunctionDescription", "Gets information about the type of variables." },
            { "TypeFunctionDescriptionForValue", "Requests information about the type for the specified variable." },
            { "TypeFunctionExampleForValue1", "Gets the type information of the variable x." },
            { "TimerFunctionDescription", "Gives access to a stopwatch with milliseconds precision." },
            { "TimerFunctionDescriptionForVoid", "Outputs the current value of the stopwatch in milliseconds." },
            { "TimerFunctionDescriptionForScalar", "Controls the stopwatch and outputs the current value of the stopwatch in milliseconds." },
            { "TimerFunctionExampleForScalar1", "Stops the stopwatch." },
            { "TimerFunctionExampleForScalar2", "Starts the stopwatch." },
            { "TimerFunctionExampleForScalar3", "Resets the stopwatch." },
            { "TimerFunctionDescriptionForString", "Controls the stopwatch and outputs the current value of the stopwatch in milliseconds." },
            { "TimerFunctionExampleForString1", "Stops the stopwatch." },
            { "TimerFunctionExampleForString2", "Starts the stopwatch." },
            { "TimerFunctionExampleForString3", "Resets the stopwatch." },
            { "TimeFunctionDescription", "The time() function allows you to get times with or without offset." },
            { "TimeFunctionDescriptionForVoid", "Gets the current time, taken at the moment of the query request." },
            { "TimeFunctionExampleForVoid1", "Prints the current time." },
            { "TimeFunctionDescriptionForScalar", "Gets the current time with the specified offset in minutes." },
            { "TimeFunctionExampleForScalar1", "Prints the time in 100 minutes." },
            { "SleepFunctionDescription", "Enables the possibility to make a short break - computationally. Sets the computation thread on idle for a number of ms." },
            { "SleepFunctionDescriptionForScalar", "Sets the computation thread on idle for the proposed time in milliseconds (ms)." },
            { "SleepFunctionExampleForScalar1", "Sleeps for 150ms and outputs the real waiting time in ms." },
            { "PromptFunctionDescription", "Prompts the user to input something." },
            { "PromptFunctionDescriptionForVoid", "Waits until the user made some input with a default message." },
            { "PromptFunctionExampleForVoid1", "Shows the user a prompt with a default message. Returns the user input as String." },
            { "PromptFunctionDescriptionForString", "Waits until the user made some input." },
            { "PromptFunctionExampleForString1", "Shows the user a prompt with the message to Please enter something. Returns the user input as String." },
            { "PrintfFunctionDescription", "Formats some text using placeholders like {0} etc. and returns the formatted string." },
            { "PrintfFunctionDescriptionForStringArguments", "Formats some text using placeholders like {0} etc. and returns the resulting string." },
            { "PrintfFunctionExampleForStringArguments1", "Evaluates the arguments and includes them in the string given by the first argument." },
            { "PrecisionFunctionDescription", "Gets or sets the precision set for display purposes." },
            { "PrecisionFunctionDescriptionForVoid", "Gets the currently set precision in digits." },
            { "PrecisionFunctionDescriptionForScalar", "Sets the output precision to x digits." },
            { "PrecisionFunctionExampleForScalar1", "Sets the precision to 5 digits." },
            { "PauseFunctionDescription", "Waits for the user to press some key." },
            { "PauseFunctionDescriptionForVoid", "Waits until the user presses some key." },
            { "PauseFunctionExampleForVoid1", "Shows the user a prompt with a default message." },
            { "NotifyFunctionDescription", "Formats some text using placeholders like {0} etc. and notifies the user using the formatted string." },
            { "NotifyFunctionDescriptionForStringArguments", "Formats some text using placeholders like {0} etc. and notifies the user using the formatted string. This function does not return the string." },
            { "NotifyFunctionExampleForStringArguments1", "Evaluates the arguments and includes them in the string given by the first argument." },
            { "HelpFunctionDescription", "Shows detailled help for various topics." },
            { "HelpFunctionDescriptionForVoid", "Shows a list of all out-of-the-box provided help topics." },
            { "HelpFunctionExampleForVoid1", "Lists all available help topics." },
            { "HelpFunctionDescriptionForString", "Shows detailled help for a specific topic." },
            { "HelpFunctionExampleForString1", "You already typed that in!" },
            { "HelpFunctionExampleForString2", "Shows the detailled help for the sinus function." },
            { "FormatFunctionDescription", "Sets the output formatting of numeric values to a certain pre-defined style." },
            { "FormatFunctionDescriptionForVoid", "Returns the currently used output format." },
            { "FormatFunctionDescriptionForString", "Changes the current output format to the given style." },
            { "FormatFunctionExampleForString1", "The default style outputs as many digits as possible, however, only with the given precision." },
            { "FormatFunctionExampleForString2", "The scientific style outputs as many digits up to the given precision with an exponential notation beyond." },
            { "FormatFunctionExampleForString3", "The engineering style outputs as many digits up to the given precision with an exponential notation used in the orders of 3, i.e. coming from exactly zero with ..., e-6, e-3, e0, e3, e6 and so on." },
            { "EvalFunctionDescription", "Evaluates some user input by executing the given code." },
            { "EvalFunctionDescriptionForString", "Evaluates the given string as code and returns the value." },
            { "EvalFunctionExampleForString1", "Evaluates the input and returns the value 5." },
            { "EvalFunctionExampleForString2", "Evaluates the query and returns the result of 17 * 5 = 85." },
            { "EvalFunctionExampleForString3", "Creates a new vector with the entries 1, 2 and 3." },
            { "DateFunctionDescription", "The date() function allows you to get dates with or without offset." },
            { "DateFunctionDescriptionForVoid", "Gets the current date, taken at the moment of the query request." },
            { "DateFunctionExampleForVoid1", "Prints the current date." },
            { "DateFunctionDescriptionForScalar", "Gets the current date with the specified offset in days." },
            { "DateFunctionExampleForScalar1", "Prints the date in 100 days." },
            { "ClearFunctionDescription", "Deletes variables from memory." },
            { "ClearFunctionDescriptionForVoid", "Clears all variables." },
            { "ClearFunctionDescriptionForArguments", "Clears the specified variables given with their names as strings." },
            { "ClearFunctionExampleForArguments1", "Deletes the variable x." },
            { "ClearFunctionExampleForArguments2", "Deletes the variables x, y and z." },
            { "CastFunctionDescription", "Casts a given string value to a real scalar." },
            { "CastFunctionDescriptionForString", "Uses a given string and casts it into a real scalar." },
            { "CastFunctionExampleForString1", "Casts a string 5 to a number 5." },
            { "CastFunctionExampleForString2", "Casts a string 0.1 to a number 0.1." },
            { "CastFunctionExampleForString3", "Casts a string 3e-5 to a number 0.00003." },
            { "CastFunctionExampleForString4", "Casts the input of a user to a number." },
            { "TanhFunctionDescription", "The standard tanh(x) function, which is sinh(x) / cosh(x). This is the hyperbolic tangent." },
            { "TanhFunctionLink", "http://en.wikipedia.org/wiki/Hyperbolic_function" },
            { "TanFunctionDescription", "The standard tan(x) function, which is sin(x) / cos(x). This is the opposite over the adjacent side." },
            { "TanFunctionLink", "http://en.wikipedia.org/wiki/Trigonometric_functions" },
            { "SinhFunctionDescription", "The standard sinh(x) function. This is the hyperbolic sine." },
            { "SinhFunctionLink", "http://en.wikipedia.org/wiki/Hyperbolic_function" },
            { "SinFunctionDescription", "The standard sin(x) function. This is the opposite over the hypotenuse side." },
            { "SinFunctionLink", "http://en.wikipedia.org/wiki/Sine" },
            { "SechFunctionDescription", "The standard sech(x) function. This is the hyperbolic secant." },
            { "SechFunctionLink", "http://en.wikipedia.org/wiki/Hyperbolic_function" },
            { "SecFunctionDescription", "The standard sec(x) function. This is one over the cosine or the hypotenuse over the adjacent side." },
            { "SecFunctionLink", "http://en.wikipedia.org/wiki/Trigonometric_functions" },
            { "CschFunctionDescription", "The standard csch(x) function. This is the hyperbolic cosecant." },
            { "CschFunctionLink", "http://en.wikipedia.org/wiki/Hyperbolic_function" },
            { "CscFunctionDescription", "The standard csc(x) function. This is 1.0 over the sine or the hypotenuse over the opposite side." },
            { "CscFunctionLink", "http://en.wikipedia.org/wiki/Trigonometric_functions" },
            { "CothFunctionDescription", "The standard coth(x) function, which is cosh(x) / sinh(x). This is the hyperbolic cotangent." },
            { "CothFunctionLink", "http://en.wikipedia.org/wiki/Hyperbolic_function" },
            { "CotFunctionDescription", "The standard cot(x) function, which is cos(x) / sin(x). This is the adjacent over the opposite side." },
            { "CotFunctionLink", "http://en.wikipedia.org/wiki/Trigonometric_functions" },
            { "CoshFunctionDescription", "The standard cosh(x) function. This is the hyperbolic cosine." },
            { "CoshFunctionLink", "http://en.wikipedia.org/wiki/Hyperbolic_function" },
            { "CosFunctionDescription", "The standard cos(x) function. This is the adjacent over the hypotenuse side." },
            { "CosFunctionLink", "http://en.wikipedia.org/wiki/Trigonometric_functions" },
            { "ArtanhFunctionDescription", "The inverse of the tanh(x) function, which is sinh(x) / cosh(x)." },
            { "ArtanhFunctionLink", "http://en.wikipedia.org/wiki/Inverse_hyperbolic_function" },
            { "ArsinhFunctionDescription", "The inverse of the sinh(x) function." },
            { "ArsinhFunctionLink", "http://en.wikipedia.org/wiki/Inverse_hyperbolic_function" },
            { "ArsechFunctionDescription", "The inverse of the sech(x) function." },
            { "ArsechFunctionLink", "http://en.wikipedia.org/wiki/Inverse_hyperbolic_function" },
            { "ArctanFunctionDescription", "The inverse of the tan(x) function, which is sin(x) / cos(x)." },
            { "ArctanFunctionLink", "http://en.wikipedia.org/wiki/Inverse_trigonometric_function" },
            { "ArcsinFunctionDescription", "The inverse of the sin(x) function." },
            { "ArcsinFunctionLink", "http://en.wikipedia.org/wiki/Inverse_trigonometric_function" },
            { "ArcsecFunctionDescription", "The inverse of the sec(x) function." },
            { "ArcsecFunctionLink", "http://en.wikipedia.org/wiki/Inverse_trigonometric_function" },
            { "ArcschFunctionDescription", "The inverse of the csch(x) function." },
            { "ArcschFunctionLink", "http://en.wikipedia.org/wiki/Inverse_hyperbolic_function" },
            { "ArcothFunctionDescription", "The inverse of the coth(x) function, which is cosh(x) / sinh(x)." },
            { "ArcothFunctionLink", "http://en.wikipedia.org/wiki/Inverse_hyperbolic_function" },
            { "ArcoshFunctionDescription", "The inverse of the cosh(x) function." },
            { "ArcoshFunctionLink", "http://en.wikipedia.org/wiki/Inverse_hyperbolic_function" },
            { "ArccscFunctionDescription", "The inverse of the csc(x) function." },
            { "ArccscFunctionLink", "http://en.wikipedia.org/wiki/Inverse_trigonometric_function" },
            { "ArccotFunctionDescription", "The inverse of the cot(x) function, which is cos(x) / sin(x)." },
            { "ArccotFunctionLink", "http://en.wikipedia.org/wiki/Inverse_trigonometric_function" },
            { "ArccosFunctionDescription", "The inverse of the cos(x) function." },
            { "ArccosFunctionLink", "http://en.wikipedia.org/wiki/Inverse_trigonometric_function" },
            { "SurfFunctionDescription", "The surf function displays both the connecting lines and the faces of the surface in color." },
            { "SurfFunctionDescriptionForMatrix", "Creates a three-dimensional shaded surface from the z components in matrix Z, using x = 1:n and y = 1:m, where [m, n] = size(Z). The height, Z, is a single-valued function defined over a geometrically rectangular grid. Z specifies the color data, as well as surface height, so color is proportional to surface height." },
            { "SurfFunctionDescriptionForMatrixMatrixMatrix", "Uses Z for the color data and surface height. X and Y are vectors or matrices defining the x and y components of a surface. If X and Y are vectors, length(X) = n and length(Y) = m, where [m, n] = size(Z). In this case, the vertices of the surface faces are (X(j), Y(i), Z(i,j)) triples. To create X and Y matrices for arbitrary domains, use the meshgrid function." },
            { "SurfFunctionExampleForMatrixMatrixMatrix1", "Evaluates sin(r)/r, or the so called sinc function as a surface plot." },
            { "SubplotFunctionDescription", "Subplot divides the current figure into rectangular panes that are numbered rowwise. Each pane contains an axes object. Subsequent plots are output to the current pane." },
            { "SubplotFunctionDescriptionForScalarScalar", "Creates a uniform subplot grid with the specified number of rows and columns." },
            { "SubplotFunctionExampleForScalarScalar1", "Creates a uniform 4x3 plot-grid and saves the grid in the variable a. See the other examples for usage information." },
            { "SubplotFunctionExampleForScalarScalar2", "Assigns a simple 2D plot with 4 series consisting of 100 random values to row 1, column 1 of the plot-grid." },
            { "SubplotFunctionExampleForScalarScalar3", "Assigns a polar plot to row 1, column 1 with rowspan 3 and columnspan 3." },
            { "SubplotFunctionExampleForScalarScalar4", "Sets the title of the plot contained in column 1, row 1." },
            { "SetFunctionDescription", "Sets properties of a plot." },
            { "SetFunctionDescriptionForStringValue", "Sets the specified (as string) field's value to a new value." },
            { "SetFunctionExampleForStringValue1", "Sets the title of the last plot to My Plot...." },
            { "SetFunctionDescriptionForPlotStringValue", "Sets the specified (as string) field's value to a new value." },
            { "SetFunctionExampleForPlotStringValue1", "Sets the title of the plot in the variable myplot to My Plot Title." },
            { "SetFunctionDescriptionForScalarStringValue", "Sets the specified (as string) field's value of the given series to a new value." },
            { "SetFunctionExampleForScalarStringValue1", "Sets the color of series #1 of the last plot to red (hex-color)." },
            { "SetFunctionExampleForScalarStringValue2", "Sets the color of series #1 of the last plot to red (rgb-color)." },
            { "SetFunctionExampleForScalarStringValue3", "Sets the color of series #1 of the last plot to red." },
            { "SetFunctionDescriptionForPlotScalarStringValue", "Sets the specified (as string) field's values of the specified series to a new value." },
            { "SetFunctionExampleForPlotScalarStringValue1", "Sets the color of series #1 of the plot in the variable myplot to red (hex-color)." },
            { "SetFunctionExampleForPlotScalarStringValue2", "Sets the color of series #1 of the plot in the variable myplot to red (rgb-color)." },
            { "SetFunctionExampleForPlotScalarStringValue3", "Sets the color of series #1 of the plot in the variable myplot to red." },
            { "SetFunctionDescriptionForMatrixStringValue", "Sets the specified (as string) field's value of the given series to a new value." },
            { "SetFunctionExampleForMatrixStringValue1", "Sets the color of series #1 to #3 of the last plot to red (hex-color)." },
            { "SetFunctionExampleForMatrixStringValue2", "Sets the color of series #1, #3, #5 of the last plot to red (rgb-color)." },
            { "SetFunctionExampleForMatrixStringValue3", "Sets the color of series #1, #3, #7 of the last plot to red." },
            { "SetFunctionDescriptionForPlotMatrixStringValue", "Sets the specified (as string) field's value to of the given series to a new value." },
            { "SetFunctionExampleForPlotMatrixStringValue1", "Sets the color of series #1 to #3 of the plot in the variable myplot to red (hex-color)." },
            { "SetFunctionExampleForPlotMatrixStringValue2", "Sets the color of series #1, #3, #5 of the plot in the variable myplot to red (rgb-color)." },
            { "SetFunctionExampleForPlotMatrixStringValue3", "Sets the color of series #1, #3, #7 of the plot in the variable myplot to red." },
            { "SetDefFunctionDescription", "The setdef function can be used to define template values for created plots. Every plot that is created after a certain template property has been set will be assigned the value of the property." },
            { "SetDefFunctionDescriptionForStringValue", "Sets the template value of the property to a certain value. This function assumes that the category is plot, i.e. general plot settings like title or gridlines." },
            { "SetDefFunctionExampleForStringValue1", "Sets the title of each new plot to a default value of My default title." },
            { "SetDefFunctionDescriptionForString", "Gets the default values that have been set for the given type." },
            { "SetDefFunctionExampleForString1", "Gets all the default property names with values that have been set for the category plot." },
            { "SetDefFunctionDescriptionForStringStringValue", "Sets the template value of the name type and property to a certain value. This function does not assume that the category is plot, such that you can enter series as well. The type series will set the template values for all new series." },
            { "SetDefFunctionExampleForStringStringValue1", "Sets the title of each new plot to a default value of My def title." },
            { "SetDefFunctionExampleForStringStringValue2", "Does not show any symbols for every series of every new plot." },
            { "SetDefFunctionExampleForStringStringValue3", "Does show lines for every series of every new plot." },
            { "SemiLogYFunctionDescription", "Creates a linear-log representation of plotting data." },
            { "SemiLogYFunctionDescriptionForMatrix", "Performs the linear-log plot of a matrix. The first column is interpreted as x-values if more than one column is given. All other columns will be interpreted as y-values." },
            { "SemiLogYFunctionExampleForMatrix1", "Plots the powers of 2 with y = 2, 4, 8, ..., 65536 at x = 1, 2, ..., 16 (since no X values are given) in a linear-log plot." },
            { "SemiLogYFunctionExampleForMatrix2", "Plots the even powers of 2 with y = 1, 4, 16, ..., 2^20 at x = 0, 1, ..., 10 in a linear-log plot." },
            { "SemiLogYFunctionExampleForMatrix3", "Plots the even and odd powers of 2 at x = 0, 1, ..., 10 in a linear-log plot." },
            { "SemiLogYFunctionDescriptionForMatrixMatrix", "Performs the linear-log plot of a matrix. The first column is interpreted as x-values if it has only one column. In this case the columns of the second matrix are interpreted as a collection of y-values. Otherwise both matrices are viewed as a collection of y-values corresponding to a set of x-values." },
            { "SemiLogYFunctionExampleForMatrixMatrix1", "Plots the powers of 2 with y = 2, 4, 8, ..., 65536 at x = 0, 1, ..., 15 in a linear-log plot." },
            { "SemiLogYFunctionExampleForMatrixMatrix2", "Plots the odd and even powers of 2 at different x-values in a linear-log plot." },
            { "SemiLogYFunctionExampleForMatrixMatrix3", "Plots the values of a sin, cos and linear function with x-values from 0 to 2 Pi in a linear-log plot." },
            { "SemiLogXFunctionDescription", "Creates a log-linear representation of plotting data." },
            { "SemiLogXFunctionDescriptionForMatrix", "Performs the log-linear plot of a matrix. The first column is interpreted as x-values if more than one column is given. All other columns will be interpreted as y-values." },
            { "SemiLogXFunctionExampleForMatrix1", "Plots the powers of 2 with y = 2, 4, 8, ..., 65536 at x = 1, 2, ..., 16 (since no X values are given) in a log-linear plot." },
            { "SemiLogXFunctionExampleForMatrix2", "Plots the even powers of 2 with y = 1, 4, 16, ..., 2^20 at x = 0, 1, ..., 10 in a log-linear plot." },
            { "SemiLogXFunctionExampleForMatrix3", "Plots the even and odd powers of 2 at x = 0, 1, ..., 10 in a log-linear plot." },
            { "SemiLogXFunctionDescriptionForMatrixMatrix", "Performs the log-linear plot of a matrix. The first column is interpreted as x-values if it has only one column. In this case the columns of the second matrix are interpreted as a collection of y-values. Otherwise both matrices are viewed as a collection of y-values corresponding to a set of x-values." },
            { "SemiLogXFunctionExampleForMatrixMatrix1", "Plots the powers of 2 with y = 2, 4, 8, ..., 65536 at x = 0, 1, ..., 15 in a log-linear plot." },
            { "SemiLogXFunctionExampleForMatrixMatrix2", "Plots the odd and even powers of 2 at different x-values in a log-linear plot." },
            { "SemiLogXFunctionExampleForMatrixMatrix3", "Plots the values of a sin, cos and linear function with x-values from 0 to 2 Pi in a log-linear plot." },
            { "PolarFunctionDescription", "Visualizes a given set of points in form of a polar plot." },
            { "PolarFunctionDescriptionForMatrix", "Performs the polar plot of a matrix. The first column is interpreted as x-values if more than one column is given. All other columns will be interpreted as y-values." },
            { "PolarFunctionExampleForMatrix1", "Plots the values of the sine function in a polar (circular) plot." },
            { "PolarFunctionExampleForMatrix2", "Plots the values of sine in a polar (circular) plot." },
            { "PolarFunctionExampleForMatrix3", "Plots the values of sine and cosine in a polar (circular) plot." },
            { "PolarFunctionDescriptionForMatrixMatrix", "Performs the polar plot of a matrix. The first column is interpreted as x-values if it has only one column. In this case the columns of the second matrix are interpreted as a collection of y-values. Otherwise both matrices are viewed as a collection of y-values corresponding to a set of x-values." },
            { "PolarFunctionExampleForMatrixMatrix1", "Plots the values of sine in a polar (circular) plot." },
            { "PolarFunctionExampleForMatrixMatrix2", "Plots the sine and tangent functions at different angles in a polar (circular) plot." },
            { "PolarFunctionExampleForMatrixMatrix3", "Plots the values of a sin, cos and tan with angles from -Pi/4 to Pi/4 in a polar (circular) plot." },
            { "PlotFunctionDescription", "Visualizes a given set of points in form of a graph." },
            { "PlotFunctionDescriptionForMatrix", "Performs the plot of a matrix. The first column is interpreted as x-values if more than one column is given. All other columns will be interpreted as y-values." },
            { "PlotFunctionExampleForMatrix1", "Plots the powers of 2 with y = 2, 4, 8, ..., 65536 at x = 1, 2, ..., 16 (since no X values are given)." },
            { "PlotFunctionExampleForMatrix2", "Plots the even powers of 2 with y = 1, 4, 16, ..., 2^20 at x = 0, 1, ..., 10." },
            { "PlotFunctionExampleForMatrix3", "Plots the even and odd powers of 2 at x = 0, 1, ..., 10." },
            { "PlotFunctionDescriptionForMatrixMatrix", "Performs the plot of a matrix. The first column is interpreted as x-values if it has only one column. In this case the columns of the second matrix are interpreted as a collection of y-values. Otherwise both matrices are viewed as a collection of y-values corresponding to a set of x-values." },
            { "PlotFunctionExampleForMatrixMatrix1", "Plots the powers of 2 with y = 2, 4, 8, ..., 65536 at x = 0, 1, ..., 15." },
            { "PlotFunctionExampleForMatrixMatrix2", "Plots the odd and even powers of 2 at different x-values." },
            { "PlotFunctionExampleForMatrixMatrix3", "Plots the values of a sin, cos and linear function with x-values from 0 to 2 Pi." },
            { "PlotFunctionDescriptionForMatrixMatrixArguments", "Performs the plot of a matrix. The first column is interpreted as x-values if it has only one column. In this case the columns of the other matrices are interpreted as a collection of y-values. Otherwise all matrices are viewed as a collection of y-values corresponding to a set of x-values." },
            { "PlotFunctionExampleForMatrixMatrixArguments1", "Plots the powers of 2 from 1 to 16 and the powers of 3 from 1 to 16 at x = 0, 1, ..., 15." },
            { "PlotFunctionExampleForMatrixMatrixArguments2", "Plots the odd, even and negative powers of 2 at different x-values." },
            { "PlotFunctionExampleForMatrixMatrixArguments3", "Plots the values of a sin, cos, linear, cosh and sinh function with x-values from 0 to 2 Pi." },
            { "Plot3FunctionDescription", "The plot3 function displays a three-dimensional plot of a set of data points." },
            { "Plot3FunctionDescriptionForMatrixMatrixMatrix", "Draws a set of points where X1, Y1, Z1 are vectors or matrices. Each set of coordinates for the i-th point is defined by the i-th value of X, Y and Z." },
            { "Plot3FunctionExampleForMatrixMatrixMatrix1", "Plots a three-dimensional helix, i.e. a spring with uniform radius." },
            { "MeshFunctionDescription", "Produces wireframe surfaces that color only the lines connecting the defining points." },
            { "MeshFunctionDescriptionForMatrix", "Draws a wireframe mesh using X = 1:n and Y = 1:m, where [m, n] = size(Z). The height, Z, is a single-valued function defined over a rectangular grid. Color is proportional to surface height." },
            { "MeshFunctionDescriptionForMatrixMatrixMatrix", "Draws a wireframe mesh with color determined by Z, so color is proportional to surface height. If X and Y are vectors, length(X) = n and length(Y) = m, where [m, n] = size(Z). In this case, (X(j), Y(i), Z(i,j)) are the intersections of the wireframe grid lines; X and Y correspond to the columns and rows of Z, respectively. If X and Y are matrices, (X(i, j), Y(i, j), Z(i, j)) are the intersections of the wireframe grid lines." },
            { "MeshFunctionExampleForMatrixMatrixMatrix1", "Evaluates sin(r)/r, or the so called sinc function as a mesh plot." },
            { "BarFunctionDescription", "A bar chart or bar graph is a chart with rectangular bars with lengths proportional to the values that they represent. The bars can be plotted vertically or horizontally. Bar charts provide a visual presentation of categorical data. Categorical data is a grouping of data into discrete groups, such as months of the year, age group, shoe sizes, and animals. In a column bar chart, the categories appear along the horizontal axis; the height of the bar corresponds to the value of each category." },
            { "BarFunctionDescriptionForMatrix", "This function draws one bar for each element in Y." },
            { "BarFunctionExampleForMatrix1", "Creates a new bar plot consisting of 5 bars." },
            { "BarFunctionExampleForMatrix2", "Creates a new bar plot consisting of 4 (stacked) bars with each one having 2 values, i.e. 2 series of bars." },
            { "LogLogFunctionDescription", "Creates a log-log representation of plotting data." },
            { "LogLogFunctionDescriptionForMatrix", "Performs the log-log plot of a matrix. The first column is interpreted as x-values if more than one column is given. All other columns will be interpreted as y-values." },
            { "LogLogFunctionExampleForMatrix1", "Plots the powers of 2 with y = 2, 4, 8, ..., 65536 at x = 1, 2, ..., 16 (since no X values are given) in a log-log plot." },
            { "LogLogFunctionExampleForMatrix2", "Plots the even powers of 2 with y = 1, 4, 16, ..., 2^20 at x = 0, 1, ..., 10 in a log-log plot." },
            { "LogLogFunctionExampleForMatrix3", "Plots the even and odd powers of 2 at x = 0, 1, ..., 10 in a log-log plot." },
            { "LogLogFunctionDescriptionForMatrixMatrix", "Performs the log-log plot of a matrix. The first column is interpreted as x-values if it has only one column. In this case the columns of the second matrix are interpreted as a collection of y-values. Otherwise both matrices are viewed as a collection of y-values corresponding to a set of x-values." },
            { "LogLogFunctionExampleForMatrixMatrix1", "Plots the powers of 2 with y = 2, 4, 8, ..., 65536 at x = 0, 1, ..., 15 in a log-log plot." },
            { "LogLogFunctionExampleForMatrixMatrix2", "Plots the odd and even powers of 2 at different x-values in a log-log plot." },
            { "LogLogFunctionExampleForMatrixMatrix3", "Plots the values of a sin, cos and linear function with x-values from 0 to 2 Pi in a log-log plot." },
            { "HistFunctionDescription", "Plots the histogram that shows the distribution of of given values." },
            { "HistFunctionDescriptionForMatrix", "Bins the elements in vector Y into 10 equally spaced containers and plots the number of elements in each container as a row vector. If Y is an m-by-p matrix, hist treats the columns of Y as vectors and plots a 10-by-p matrix n. Each column of n contains the results for the corresponding column of Y. No elements of Y can be complex or of type integer." },
            { "HistFunctionExampleForMatrix1", "Places 100 uniformly generated random numbers into 10 bins with a spacing that should be approximately 0.1." },
            { "HistFunctionDescriptionForMatrixMatrix", "Here x is a vector, such that the distribution of Y among length(x) bins with centers specified by x. For example, if x is a 5-element vector, hist distributes the elements of Y into five bins centered on the x-axis at the elements in x, none of which can be complex." },
            { "HistFunctionExampleForMatrixMatrix1", "Places 100 uniformly generated random numbers into 3 bins that center around 0.1, 0.5 and 0.9." },
            { "HistFunctionDescriptionForMatrixScalar", "Bins the elements in vector Y into nbins equally spaced containers and plots the number of elements as before." },
            { "HistFunctionExampleForMatrixScalar1", "Places 100 uniformly generated random numbers into 20 bins with a spacing that should be approximately 0.05." },
            { "HeatmapFunctionDescription", "A heatmap plot displays entries of matrix Z with a color. Even though numbers might be hard to read for large matrices, a heatmap can give a first impression about the structure of a matrix." },
            { "HeatmapFunctionDescriptionForMatrix", "This draws a heatmap plot of matrix Z, where Z is the matrix to be plotted. The plot considers all entries of the matrix Z with their absolute values." },
            { "HeatmapFunctionExampleForMatrix1", "Creates a heatmap plot of the given matrix 50x50 (uniform) random matrix." },
            { "FplotFunctionDescription", "Visualizes a given function in form of a graph." },
            { "FplotFunctionDescriptionForFunction", "Visualizes the given function f between -1 and 1 for the x-axis." },
            { "FplotFunctionExampleForFunction1", "Draws the real plot of the sine function sin(x) with x between -1 and 1." },
            { "FplotFunctionExampleForFunction2", "Draws the real plot of sin(x) * cos(x) with x between -1 and 1." },
            { "FplotFunctionDescriptionForFunctionScalarScalar", "Visualizes the given function f between the given values for x-axis." },
            { "FplotFunctionExampleForFunctionScalarScalar1", "Draws the plot of the sine function between 0 and 2pi." },
            { "FplotFunctionDescriptionForFunctionScalarScalarScalar", "Visualizes the given function f between the given values for the x-axes with the given precision." },
            { "FplotFunctionExampleForFunctionScalarScalarScalar1", "Draws the plot of the sine function between 0 and 2pi with a precision of 0.001." },
            { "ErrorbarFunctionDescription", "Visualizes a given set of points with errors in form of a graph with error bars." },
            { "ErrorbarFunctionDescriptionForMatrixMatrix", "Performs the plot of a matrix with errors. All columns are interpreted as y-values if more than one column is given. The error matrix gives the y-errors (and optionally the x-errors) for the plot." },
            { "ErrorbarFunctionExampleForMatrixMatrix1", "Plots the powers of 2 with y = 2, 4, 8, ..., 65536 at x = 1, 2, ..., 16 (since no X values are given) with an error of 0.2." },
            { "ErrorbarFunctionExampleForMatrixMatrix2", "Plots the even and odd powers of 2 at x = 0, 1, ..., 10 with an y-error of 100000 and an x-error of 0.5." },
            { "ErrorbarFunctionDescriptionForMatrixMatrixMatrix", "Performs the plot of a matrix. The first column is interpreted as x-values if it has only one column. In this case the columns of the second matrix are interpreted as a collection of y-values. Otherwise both matrices are viewed as a collection of y-values corresponding to a set of x-values." },
            { "ErrorbarFunctionExampleForMatrixMatrixMatrix1", "Plots some random numbers at x = -7, -6, ..., 7 with an error of 0.1." },
            { "ErrorbarFunctionExampleForMatrixMatrixMatrix2", "Plots the values of a sin, and cos with x-values from 0 to 2 Pi and a random error." },
            { "CplotFunctionDescription", "In mathematics, a complex function is a function with the complex numbers (see the imaginary numbers and the complex plane) as both its domain and codomain. The complex plot assigns a color to each point of complex plane. the origin is white, 1 is red, −1 is cyan, and a point at the infinity is black." },
            { "CplotFunctionDescriptionForFunction", "Visualizes the given complex function f between -1 and 1 for the real and the imaginary axes." },
            { "CplotFunctionExampleForFunction1", "Draws the complex plot of the sine function sin(z) with z = x + iy." },
            { "CplotFunctionExampleForFunction2", "Draws the complex plot of sin(z) * cos(z) with z = x + iy." },
            { "CplotFunctionDescriptionForFunctionScalarScalar", "Visualizes the given complex function f between the given values for the real and the imaginary axes." },
            { "CplotFunctionExampleForFunctionScalarScalar1", "Draws the complex plot of the sine function between 0 and 2pi on the real axis and -1 and 1 on the imaginary axes." },
            { "CplotFunctionDescriptionForFunctionScalarScalarScalarScalar", "Visualizes the given complex function f between the given values for the real and the imaginary axes." },
            { "CplotFunctionExampleForFunctionScalarScalarScalarScalar1", "Draws the complex plot of the sine function between 0 and 2pi on the real axis and -1 and 1 on the imaginary axes." },
            { "ContourFunctionDescription", "A contour plot displays isolines of matrix Z. A contour line (also isoline, isopleth, or isarithm) of a function of two variables is a curve along which the function has a constant value." },
            { "ContourFunctionDescriptionForMatrix", "This draws a contour plot of matrix Z, where Z is interpreted as heights with respect to the x-y plane. Z must be at least a 2-by-2 matrix that contains at least two different values. The number of contour lines and the values of the contour lines are chosen automatically based on the minimum and maximum values of Z. The ranges of the x- and y-axis are [1:n] and [1:m], where [m,n] = size(Z)." },
            { "ContourFunctionExampleForMatrix1", "Creates a contour plot of the given matrix." },
            { "ContourFunctionDescriptionForMatrixScalar", "Draws a contour plot of matrix Z with n contour levels where n is an integer scalar." },
            { "ContourFunctionExampleForMatrixScalar1", "Creates a contour plot of the given matrix." },
            { "ContourFunctionDescriptionForMatrixMatrix", "This draws a contour plot of matrix Z with contour lines at the data values specified in the monotonically increasing vector v. The number of contour levels is equal to length(v). To draw a single contour of level i, use contour(Z,[i i])." },
            { "ContourFunctionExampleForMatrixMatrix1", "Creates a contour plot of the given matrix." },
            { "ContourFunctionDescriptionForMatrixMatrixMatrix", "Draw contour plots of Z using X and Y to determine the x- and y-axis limits. When X and Y are matrices, they must be the same size as Z and must be monotonically increasing." },
            { "ContourFunctionDescriptionForMatrixMatrixMatrixScalar", "Draw contour plots of Z with n contour levels where n is an integer scalar using X and Y to determine the x- and y-axis limits. When X and Y are matrices, they must be the same size as Z and must be monotonically increasing." },
            { "ContourFunctionDescriptionForMatrixMatrixMatrixMatrix", "Draw contour plots of Z with contour lines at the data values specified in the monotonically increasing vector v using X and Y to determine the x- and y-axis limits. When X and Y are matrices, they must be the same size as Z and must be monotonically increasing." }
        };

        /// <summary>
        /// Gets or sets the current help texts to use.
        /// </summary>
        public static IDictionary<String, String> Current = Default;
    }
}
