namespace YAMP.Help
{
    using System;
    using System.Collections.Generic;

    public static class Localization
    {
        public static readonly IDictionary<String, String> Default = new Dictionary<String, String>
        {
            { "NoDescription", "No description available." },
            { "NoHelp", "No help available." },
            { "AlphaConstantDescription", "The Feigenbaum constant alpha is the ratio between the width of a tine and the width of one of its two subtines (except the tine closest to the fold)." },
            { "AlphaConstantLink", "http://en.wikipedia.org/wiki/Feigenbaum_constant" },
            { "BernoulliConstantDescription", "In mathematics, the Bernoulli numbers Bn are a sequence of rational numbers with deep connections to number theory. The first 21 numbers are given in this vector. The Bernoulli numbers appear in the Taylor series expansions of the tangent and hyperbolic tangent functions, in formulas for the sum of powers of the first positive integers, in the Euler–Maclaurin formula, and in expressions for certain values of the Riemann zeta function." },
            { "BernoulliConstantLink", "http://en.wikipedia.org/wiki/Bernoulli_number" },
            { "CatalanConstantDescription", "In mathematics, Catalan's constant G, which occasionally appears in estimates in combinatorics, is defined by G = beta(2), where beta is the Dirichlet beta function." },
            { "CatalanConstantLink", "http://en.wikipedia.org/wiki/Catalan_constant" },
            { "ContainerConstantDescription", "A custom constant defined by you." },
            { "IConstantDescription", "In mathematics, the imaginary unit or unit imaginary number allows the real number system to be extended to the complex number system." },
            { "IConstantLink", "http://en.wikipedia.org/wiki/Imaginary_unit" },
            { "GaussConstantDescription", "In mathematics, Gauss's constant, denoted by G, is defined as the reciprocal of the arithmetic-geometric mean of 1 and the square root of 2." },
            { "Gamma1ConstantDescription", "The Euler–Mascheroni constant (also called Euler's constant) is a mathematical constant recurring in analysis and number theory." },
            { "Gamma1ConstantLink", "http://en.wikipedia.org/wiki/Euler–Mascheroni_constant" },
            { "FalseConstantDescription", "False can be used in all logical expressions or for calculations. False is numerically represented by 0, however, that does not necessarily mean that everything else is true." },
            { "EConstantDescription", "The number e is an important mathematical constant, approximately equal to 2.71828, that is the base of the natural logarithm." },
            { "EConstantLink", "http://en.wikipedia.org/wiki/E_(mathematical_constant)" },
            { "DeltaConstantDescription", "The Feigenbaum constant delta is the limiting ratio of each bifurcation interval to the next between every period doubling, of a one-parameter map." },
            { "DeltaConstantLink", "http://en.wikipedia.org/wiki/Feigenbaum_constant" },
            { "DegConstantDescription", "A degree (in full, a degree of arc, arc degree, or arcdegree), usually denoted by ° (the degree symbol), is a measurement of plane angle, representing 1⁄360 of a full rotation; one degree is equivalent to π/180 radians." },
            { "DegConstantLink", "http://en.wikipedia.org/wiki/Degree_(angle)" },
            { "TrueConstantDescription", "True can be used in all logical expressions or for calculations. True is numerically represented by 1, however, that does not necessarily mean that everything else is false." },
            { "PiConstantDescription", "The mathematical constant Pi is the ratio of a circle's circumference to its diameter." },
            { "PiConstantLink", "http://en.wikipedia.org/wiki/Pi" },
            { "PhiConstantDescription", "The golden ratio: two quantities are in the golden ratio if the ratio of the sum of the quantities to the larger quantity is equal to the ratio of the larger quantity to the smaller one." },
            { "PhiConstantLink", "http://en.wikipedia.org/wiki/Golden_ratio" },
            { "OmegaConstantDescription", "The omega constant is the value of W(1) where W is Lambert's W function. The name is derived from the alternate name for Lambert's W function, the omega function." },
            { "OmegaConstantLink", "http://en.wikipedia.org/wiki/Omega_constant" },
            { "DiagFunctionDescription", "Creates a diagonal matrix that has the given numeric values on the diagonal." },
            { "DiagFunctionDescriptionForMatrix", "Creates a diagonal matrix with the values from the given matrix." },
            { "DiagFunctionExampleForMatrix1", "Creates a matrix with dimension 25 x 25, containing random values on the diagonal." },
            { "DiagFunctionExampleForMatrix2", "Creates a matrix with dimension 5 x 5, containing random values on the diagonal." },
            { "DiagFunctionDescriptionForScalar", "Creates a diagonal matrix with the given value, i.e. just returns the value (1 x 1 diagonal matrix = scalar)." },
            { "DiagFunctionExampleForScalar1", "Returns the given value, which is 3." },
            { "DiagFunctionDescriptionForArguments", "Tries to create a diagonal matrix with the given arguments, which must be of numeric nature, i.e. scalars or matrices." },
            { "DiagFunctionExampleForArguments1", "Creates the unit matrix with dimension 4." },
            { "DiagFunctionExampleForArguments2", "Creates a matrix that is close to the unit matrix, except that one block has been rotated in the middle." },
            { "EyeFunctionDescription", "Generates an identity matrix. In linear algebra, the identity matrix or unit matrix of size n is the n x n square matrix with ones on the main diagonal and zeros elsewhere." },
            { "EyeFunctionLink", "http://en.wikipedia.org/wiki/Identity_matrix" },
            { "EyeFunctionDescriptionForVoid", "Generates the 1x1 identity matrix, which is just 1." },
            { "EyeFunctionDescriptionForScalar", "Generates an n-dimensional identity matrix." },
            { "EyeFunctionExampleForScalar1", "Returns a 5x5 matrix with 1 on the diagonal and 0 else." },
            { "EyeFunctionDescriptionForScalarScalar", "Generates an n x m-dimensional identity matrix." },
            { "EyeFunctionExampleForScalarScalar1", "Returns a 5x3 matrix with 1 on the diagonal and 0 else." },
            { "ImgToRGBFunctionDescription", "Converts matrix data loaded from an image into three matrices which contain the red, green, and blue values separately. It is the inverse function to RgbToImg." },
            { "ImgToRGBFunctionDescriptionForMatrix", "Gets the RGB values of an image matrix." },
            { "ImgToRGBFunctionExampleForMatrix1", "Returns three matrices containing the red, green, and blue values of the image." },
            { "LinspaceFunctionDescription", "Returns a uniformly increased vector." },
            { "LinspaceFunctionDescriptionForScalarScalarScalar", "Creates a vector with count elements ranging from a certain value to a certain value." },
            { "LinspaceFunctionExampleForScalarScalarScalar1", "Creates the vector [0, 2.5, 5, 7.5, 10], i.e. stepping 2.5 and number of elements 5." },
            { "LogspaceFunctionDescription", "Returns a logarithmically increased vector." },
            { "LogspaceFunctionDescriptionForScalarScalarScalar", "Creates a vector with count elements ranging from a certain value to a certain value for the basis 10." },
            { "LogspaceFunctionExampleForScalarScalarScalar1", "Creates the vector [100, 177, 316, 562, 1000], i.e. start at 10^2 and end at 10^3 with number of elements 5." },
            { "LogspaceFunctionDescriptionForScalarScalarScalarScalar", "Creates a vector with count elements ranging from a certain value to a certain value for an arbitrary basis." },
            { "LogspaceFunctionExampleForScalarScalarScalarScalar1", "Creates the vector [4, 8, 16, 32, 64], i.e. start at 2^2 and end at 2^6 with number of elements 5." },
            { "MeshgridFunctionDescription", "Generate X and Y matrices for three-dimensional plots." },
            { "MeshgridFunctionDescriptionForMatrix", "The function call is the same as [X, Y] = meshgrid(x, x), i.e. the input value is seen as both, X and Y vector." },
            { "MeshgridFunctionReturnForMatrix1", "The generated X value matrix." },
            { "MeshgridFunctionReturnForMatrix2", "The generated Y value matrix." },
            { "MeshgridFunctionDescriptionForMatrixMatrix", "Transforms the domain specified by vectors x and y into arrays X and Y, which can be used to evaluate functions of two variables and three-dimensional mesh/surface plots. The rows of the output array X are copies of the vector x; columns of the output array Y are copies of the vector y." },
            { "MeshgridFunctionExampleForMatrixMatrix1", "Creates the X and Y matrices with X having the values 1 to 3 in each row, while Y has the values 10 to 14 in each column." },
            { "MeshgridFunctionReturnForMatrixMatrix1", "The generated X value matrix." },
            { "MeshgridFunctionReturnForMatrixMatrix2", "The generated Y value matrix." },
            { "ModFunctionDescription", "Calculates the modulo of the integer real parts of the arguments." },
            { "ModFunctionDescriptionForMatrixScalar", "Performes the modulo operation on each of the entries of the given matrix." },
            { "ModFunctionExampleForMatrixScalar1", "Computes the modulo matrix resulting in [1,0;1;0]." },
            { "ModFunctionDescriptionForScalarMatrix", "Performes the modulo operation on each of the entries of the given matrix." },
            { "ModFunctionExampleForScalarMatrix1", "Computes the modulo matrix resulting in [0,0;2;2]." },
            { "ModFunctionDescriptionForScalarScalar", "Calculates the modulo of the integer real parts of the numerator with respect to the denominator." },
            { "ModFunctionExampleForScalarScalar1", "Computes the modulo of 17 with respect to 3 resulting in 2." },
            { "NcrFunctionDescription", "In mathematics, binomial coefficients are a family of positive integers that occur as coefficients in the binomial theorem. They are indexed by two nonnegative integers; the binomial coefficient indexed by n and r is usually written (n k). It is the coefficient of the x^k term in the polynomial expansion of the binomial power (1 + x)^n. Under suitable circumstances the value of the coefficient is given by the expression n! / (k! * (n - k)!). Arranging binomial coefficients into rows for successive values of n, and in which k ranges from 0 to n, gives a triangular array called Pascal's triangle." },
            { "NcrFunctionLink", "http://en.wikipedia.org/wiki/Binomial_coefficient" },
            { "NcrFunctionDescriptionForScalarScalar", "Computes the value of r out of n, i.e. n choose r." },
            { "NcrFunctionExampleForScalarScalar1", "Computes 8! / (2! * 6!), which is 28." },
            { "OnesFunctionDescription", "Generates a matrix with only ones." },
            { "OnesFunctionDescriptionForVoid", "Generates a 1x1 matrix." },
            { "OnesFunctionDescriptionForScalar", "Generates an n-dimensional matrix with only ones." },
            { "OnesFunctionExampleForScalar1", "Returns a 5x5 matrix with 1 in each cell." },
            { "OnesFunctionDescriptionForScalarScalar", "Generates a n-by-m matrix with only ones." },
            { "OnesFunctionExampleForScalarScalar1", "Returns a 5x2 matrix with 1 in each cell." },
            { "RGBToImgFunctionDescription", "Fuses three matrices containing the reg, green, and blue values of an image separately into one single matrix which contains the information of the three matrices. It is the inverse function to ImgToRgb." },
            { "RGBToImgFunctionDescriptionForMatrixMatrixMatrix", "Given the red, green, and blue matrices (with values between 0 and 255) this function calculates blue + green * 256 + red * 256^2 using only the real integer part of the matrices." },
            { "RGBToImgFunctionExampleForMatrixMatrixMatrix1", "Reverses the transformation by the ImgToRgb function." },
            { "SphereFunctionDescription", "The sphere function generates the x-, y-, and z-coordinates of a unit sphere for use with surf and mesh." },
            { "SphereFunctionDescriptionForVoid", "Draws a surf plot of an 20-by-20 sphere in the current figure." },
            { "SphereFunctionExampleForVoid1", "Returns the three matrices with x-, y-, and Z coordinates for a unit sphere. The matrices are saved in the variables X, Y, Z." },
            { "SphereFunctionDescriptionForScalar", "Draws a surf plot of an n-by-n sphere in the current figure." },
            { "SphereFunctionExampleForScalar1", "Returns the three matrices with x-, y-, and Z coordinates for a unit sphere with n = 30. The 31x31 matrices are saved in the variables X, Y, Z." },
            { "ZerosFunctionDescription", "Generates a matrix with only zeros." },
            { "ZerosFunctionDescriptionForVoid", "Generates a 1x1 matrix." },
            { "ZerosFunctionDescriptionForScalar", "Generates an n-dimensional matrix with only zeros." },
            { "ZerosFunctionExampleForScalar1", "Returns a 5x5 matrix with 0 in each cell." },
            { "ZerosFunctionDescriptionForScalarScalar", "Generates a n-by-m matrix with only zeros." },
            { "ZerosFunctionExampleForScalarScalar1", "Returns a 5x2 matrix with 0 in each cell." },
            { "ContainerFunctionDescription", "A custom function defined by you." },
            { "ContainerFunctionDescriptionForContextValue", "Executes the custom function with your code." },
            { "Bin2DecFunctionDescription", "Converts a binary number to a decimal number." },
            { "Bin2DecFunctionDescriptionForString", "The function ignores white spaces and converts the given binary input to the equivalent decimal number." },
            { "Bin2DecFunctionExampleForString1", "Binary 010111 converts to decimal 23." },
            { "Cart2PolFunctionDescription", "Converts a vector given in cartesian coordinates to a polar coordinates." },
            { "Cart2PolFunctionDescriptionForScalarScalar", "Converts a set of values (x, y) to a column vector with 2 rows (r, phi)." },
            { "Cart2PolFunctionExampleForScalarScalar1", "Computes the polar coordinates of the given cartesian coordinates x = 3, y = 2." },
            { "Cart2PolFunctionDescriptionForMatrix", "Converts a matrix of values (x, y in the rows or columns) to a matrix of converted values." },
            { "Cart2PolFunctionExampleForMatrix1", "Evaluates the 4x2 matrix, using the columns as vectors (a set of row vectors to be converted)." },
            { "Cart2SphFunctionDescription", "Converts a vector given in cartesian coordinates to a spherical coordinates." },
            { "Cart2SphFunctionDescriptionForScalarScalarScalar", "Converts a set of values (x, y, z) to a column vector with 3 rows (r, phi, theta)." },
            { "Cart2SphFunctionExampleForScalarScalarScalar1", "Computes the spherical coordinates of the given cartesian coordinates x = 3, y = 2 and z = 1." },
            { "Cart2SphFunctionDescriptionForMatrix", "Converts a matrix of values (x, y, z in the rows or columns) to a matrix of converted values." },
            { "Cart2SphFunctionExampleForMatrix1", "Evaluates the 4x3 matrix, using the columns as vectors (a set of row vectors to be converted)." },
            { "Hex2DecFunctionDescription", "Converts a hexadecimal number to a decimal number." },
            { "Hex2DecFunctionDescriptionForString", "The function ignores white spaces and converts the given hexadecimal input to the equivalent decimal number." },
            { "Hex2DecFunctionExampleForString1", "Hexadecimal FF converts to decimal 255." },
            { "Oct2DecFunctionDescription", "Converts a octal number to a decimal number." },
            { "Oct2DecFunctionDescriptionForString", "The function ignores white spaces and converts the given octal input to the equivalent decimal number." },
            { "Oct2DecFunctionExampleForString1", "Octal 1627 converts to decimal 919." },
            { "Sph2CartFunctionDescription", "Converts a vector given in spherical coordinates to a cartesian coordinates." },
            { "Sph2CartFunctionDescriptionForScalarScalarScalar", "Converts a set of values (r, theta, phi) to a column vector with 3 rows (x, y, z)." },
            { "Sph2CartFunctionExampleForScalarScalarScalar1", "Computes the cartesian coordinates of the given spherical coordinates r = 4, theta = pi / 2 and phi = pi /4." },
            { "Sph2CartFunctionDescriptionForMatrix", "Converts a matrix of values (r, theta, phi in the rows or columns) to a matrix of converted values." },
            { "Sph2CartFunctionExampleForMatrix1", "Evaluates the 4x3 matrix, using the columns as vectors (a set of row vectors to be converted)." },
        };

        public static IDictionary<String, String> Current = Default;
    }
}
